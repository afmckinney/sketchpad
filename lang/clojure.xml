<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE api SYSTEM "CompletionXml.dtd">


<!--
clojure.xml - API specification for clojure.core.

    		Used by RSyntaxTextArea to provide code completion.

    Author:       	 Jon Rose 

    Version:      	 0.1 
-->
<api language="Clojure">
	<environment paramStartChar=" " paramEndChar=")" paramSeparator=" " terminal=""/>
	<keywords><keyword name="formatter-out" type="function" returnType=" " definedIn="clojure.pprint">
	<params>
	<param type="function" name="format-in"/>

	</params>
	<desc><![CDATA[	Makes a function which can directly run format-in. The function is
fn [args] ... and returns nil. This version of the formatter macro is
designed to be used with *out* set to an appropriate Writer. In particular,
this is meant to be used as part of a pretty printer dispatch method.

format-in can be either a control string or a previously compiled format.]]></desc>
</keyword>
<keyword name="formatter" type="function" returnType=" " definedIn="clojure.pprint">
	<params>
	<param type="function" name="format-in"/>

	</params>
	<desc><![CDATA[	Makes a function which can directly run format-in. The function is
fn [stream &amp;args] ... and returns nil unless the stream is nil (meaning 
output to a string) in which case it returns the resulting string.

format-in can be either a control string or a previously compiled format.]]></desc>
</keyword>
<keyword name="get-pretty-writer" type="function" returnType=" " definedIn="clojure.pprint">
	<params>
	<param type="function" name="writer"/>

	</params>
	<desc><![CDATA[	Returns the java.io.Writer passed in wrapped in a pretty writer proxy, unless it's 
already a pretty writer. Generally, it is unneccesary to call this function, since pprint,
write, and cl-format all call it if they need to. However if you want the state to be 
preserved across calls, you will want to wrap them with this. 

For example, when you want to generate column-aware output with multiple calls to cl-format, 
do it like in this example:

    (defn print-table [aseq column-width]
      (binding [*out* (get-pretty-writer *out*)]
        (doseq [row aseq]
          (doseq [col row]
            (cl-format true "~4D~7,vT" col column-width))
          (prn))))

Now when you run:

    user> (print-table (map #(vector % (* % %) (* % % %)) (range 1 11)) 8)

It prints a table of squares and cubes for the numbers from 1 to 10:

       1      1       1    
       2      4       8    
       3      9      27    
       4     16      64    
       5     25     125    
       6     36     216    
       7     49     343    
       8     64     512    
       9     81     729    
      10    100    1000]]></desc>
</keyword>
<keyword name="print-table" type="function" returnType=" " definedIn="clojure.pprint">
	<params>
	<param type="function" name="ks"/>
	<param type="function" name="rows"/>

	</params>
	<desc><![CDATA[	Alpha - subject to change.
   Prints a collection of maps in a textual table. Prints table headings
   ks, and then a line of output for each row, corresponding to the keys
   in ks. If ks are not specified, use the keys of the first item in rows.]]></desc>
</keyword>
<keyword name="print-table" type="function" returnType=" " definedIn="clojure.pprint">
	<params>
	<param type="function" name="rows"/>

	</params>
	<desc><![CDATA[	Alpha - subject to change.
   Prints a collection of maps in a textual table. Prints table headings
   ks, and then a line of output for each row, corresponding to the keys
   in ks. If ks are not specified, use the keys of the first item in rows.]]></desc>
</keyword>
<keyword name="write" type="function" returnType=" " definedIn="clojure.pprint">
	<params>
	<param type="function" name="object"/>
	<param type="function" name="kw-args"/>

	</params>
	<desc><![CDATA[	Write an object subject to the current bindings of the printer control variables.
Use the kw-args argument to override individual variables for this call (and any 
recursive calls). Returns the string result if :stream is nil or nil otherwise.

The following keyword arguments can be passed with values:
  Keyword              Meaning                              Default value
  :stream              Writer for output or nil             true (indicates *out*)
  :base                Base to use for writing rationals    Current value of *print-base*
  :circle*             If true, mark circular structures    Current value of *print-circle*
  :length              Maximum elements to show in sublists Current value of *print-length*
  :level               Maximum depth                        Current value of *print-level*
  :lines*              Maximum lines of output              Current value of *print-lines*
  :miser-width         Width to enter miser mode            Current value of *print-miser-width*
  :dispatch            The pretty print dispatch function   Current value of *print-pprint-dispatch*
  :pretty              If true, do pretty printing          Current value of *print-pretty*
  :radix               If true, prepend a radix specifier   Current value of *print-radix*
  :readably*           If true, print readably              Current value of *print-readably*
  :right-margin        The column for the right margin      Current value of *print-right-margin*
  :suppress-namespaces If true, no namespaces in symbols    Current value of *print-suppress-namespaces*

  * = not yet supported
]]></desc>
</keyword>
<keyword name="print-length-loop" type="function" returnType=" " definedIn="clojure.pprint">
	<params>
	<param type="function" name="bindings"/>
	<param type="function" name="body"/>

	</params>
	<desc><![CDATA[	A version of loop that iterates at most *print-length* times. This is designed 
for use in pretty-printer dispatch functions.]]></desc>
</keyword>
<keyword name="write-out" type="function" returnType=" " definedIn="clojure.pprint">
	<params>
	<param type="function" name="object"/>

	</params>
	<desc><![CDATA[	Write an object to *out* subject to the current bindings of the printer control 
variables. Use the kw-args argument to override individual variables for this call (and 
any recursive calls).

*out* must be a PrettyWriter if pretty printing is enabled. This is the responsibility
of the caller.

This method is primarily intended for use by pretty print dispatch functions that 
already know that the pretty printer will have set up their environment appropriately.
Normal library clients should use the standard "write" interface. ]]></desc>
</keyword>
<keyword name="simple-dispatch" type="function" returnType=" " definedIn="clojure.pprint">
	<params>
	<param type="function" name="object"/>

	</params>
	<desc><![CDATA[	The pretty print dispatch function for simple data structure format.]]></desc>
</keyword>
<keyword name="pprint-indent" type="function" returnType=" " definedIn="clojure.pprint">
	<params>
	<param type="function" name="relative-to"/>
	<param type="function" name="n"/>

	</params>
	<desc><![CDATA[	Create an indent at this point in the pretty printing stream. This defines how 
following lines are indented. relative-to can be either :block or :current depending 
whether the indent should be computed relative to the start of the logical block or
the current column position. n is an offset. 

This function is intended for use when writing custom dispatch functions.

Output is sent to *out* which must be a pretty printing writer.]]></desc>
</keyword>
<keyword name="cl-format" type="function" returnType=" " definedIn="clojure.pprint">
	<params>
	<param type="function" name="writer"/>
	<param type="function" name="format-in"/>
	<param type="function" name="args"/>

	</params>
	<desc><![CDATA[	An implementation of a Common Lisp compatible format function. cl-format formats its
arguments to an output stream or string based on the format control string given. It 
supports sophisticated formatting of structured data.

Writer is an instance of java.io.Writer, true to output to *out* or nil to output 
to a string, format-in is the format control string and the remaining arguments 
are the data to be formatted.

The format control string is a string to be output with embedded 'format directives' 
describing how to format the various arguments passed in.

If writer is nil, cl-format returns the formatted result string. Otherwise, cl-format 
returns nil.

For example:
 (let [results [46 38 22]]
        (cl-format true "There ~[are~;is~:;are~]~:* ~d result~:p: ~{~d~^, ~}~%" 
                   (count results) results))

Prints to *out*:
 There are 3 results: 46, 38, 22

Detailed documentation on format control strings is available in the "Common Lisp the 
Language, 2nd edition", Chapter 22 (available online at:
http://www.cs.cmu.edu/afs/cs.cmu.edu/project/ai-repository/ai/html/cltl/clm/node200.html#SECTION002633000000000000000) 
and in the Common Lisp HyperSpec at 
http://www.lispworks.com/documentation/HyperSpec/Body/22_c.htm
]]></desc>
</keyword>
<keyword name="code-dispatch" type="function" returnType=" " definedIn="clojure.pprint">
	<params>
	<param type="function" name="object"/>

	</params>
	<desc><![CDATA[	The pretty print dispatch function for pretty printing Clojure code.]]></desc>
</keyword>
<keyword name="pprint" type="function" returnType=" " definedIn="clojure.pprint">
	<params>
	<param type="function" name="object"/>

	</params>
	<desc><![CDATA[	Pretty print object to the optional output writer. If the writer is not provided, 
print the object to the currently bound value of *out*.]]></desc>
</keyword>
<keyword name="pprint" type="function" returnType=" " definedIn="clojure.pprint">
	<params>
	<param type="function" name="object"/>
	<param type="function" name="writer"/>

	</params>
	<desc><![CDATA[	Pretty print object to the optional output writer. If the writer is not provided, 
print the object to the currently bound value of *out*.]]></desc>
</keyword>
<keyword name="fresh-line" type="function" returnType=" " definedIn="clojure.pprint">
	<params>

	</params>
	<desc><![CDATA[	Make a newline if *out* is not already at the beginning of the line. If *out* is
not a pretty writer (which keeps track of columns), this function always outputs a newline.]]></desc>
</keyword>
<keyword name="pp" type="function" returnType=" " definedIn="clojure.pprint">
	<params>

	</params>
	<desc><![CDATA[	A convenience macro that pretty prints the last thing output. This is
exactly equivalent to (pprint *1).]]></desc>
</keyword>
<keyword name="with-pprint-dispatch" type="function" returnType=" " definedIn="clojure.pprint">
	<params>
	<param type="function" name="function"/>
	<param type="function" name="body"/>

	</params>
	<desc><![CDATA[	Execute body with the pretty print dispatch function bound to function.]]></desc>
</keyword>
<keyword name="pprint-newline" type="function" returnType=" " definedIn="clojure.pprint">
	<params>
	<param type="function" name="kind"/>

	</params>
	<desc><![CDATA[	Print a conditional newline to a pretty printing stream. kind specifies if the 
newline is :linear, :miser, :fill, or :mandatory. 

This function is intended for use when writing custom dispatch functions.

Output is sent to *out* which must be a pretty printing writer.]]></desc>
</keyword>
<keyword name="pprint-logical-block" type="function" returnType=" " definedIn="clojure.pprint">
	<params>
	<param type="function" name="options*"/>
	<param type="function" name="body"/>

	</params>
	<desc><![CDATA[	Execute the body as a pretty printing logical block with output to *out* which 
must be a pretty printing writer. When used from pprint or cl-format, this can be 
assumed. 

This function is intended for use when writing custom dispatch functions.

Before the body, the caller can optionally specify options: :prefix, :per-line-prefix, 
and :suffix.]]></desc>
</keyword>
<keyword name="set-pprint-dispatch" type="function" returnType=" " definedIn="clojure.pprint">
	<params>
	<param type="function" name="function"/>

	</params>
	<desc><![CDATA[	Set the pretty print dispatch function to a function matching (fn [obj] ...)
where obj is the object to pretty print. That function will be called with *out* set
to a pretty printing writer to which it should do its printing.

For example functions, see simple-dispatch and code-dispatch in 
clojure.pprint.dispatch.clj.]]></desc>
</keyword>
<keyword name="pprint-tab" type="function" returnType=" " definedIn="clojure.pprint">
	<params>
	<param type="function" name="kind"/>
	<param type="function" name="colnum"/>
	<param type="function" name="colinc"/>

	</params>
	<desc><![CDATA[	Tab at this point in the pretty printing stream. kind specifies whether the tab
is :line, :section, :line-relative, or :section-relative. 

Colnum and colinc specify the target column and the increment to move the target
forward if the output is already past the original target.

This function is intended for use when writing custom dispatch functions.

Output is sent to *out* which must be a pretty printing writer.

THIS FUNCTION IS NOT YET IMPLEMENTED.]]></desc>
</keyword>
<keyword name="walk" type="function" returnType=" " definedIn="clojure.walk">
	<params>
	<param type="function" name="inner"/>
	<param type="function" name="outer"/>
	<param type="function" name="form"/>

	</params>
	<desc><![CDATA[	Traverses form, an arbitrary data structure.  inner and outer are
  functions.  Applies inner to each element of form, building up a
  data structure of the same type, then applies outer to the result.
  Recognizes all Clojure data structures. Consumes seqs as with doall.]]></desc>
</keyword>
<keyword name="prewalk-demo" type="function" returnType=" " definedIn="clojure.walk">
	<params>
	<param type="function" name="form"/>

	</params>
	<desc><![CDATA[	Demonstrates the behavior of prewalk by printing each form as it is
  walked.  Returns form.]]></desc>
</keyword>
<keyword name="postwalk-demo" type="function" returnType=" " definedIn="clojure.walk">
	<params>
	<param type="function" name="form"/>

	</params>
	<desc><![CDATA[	Demonstrates the behavior of postwalk by printing each form as it is
  walked.  Returns form.]]></desc>
</keyword>
<keyword name="keywordize-keys" type="function" returnType=" " definedIn="clojure.walk">
	<params>
	<param type="function" name="m"/>

	</params>
	<desc><![CDATA[	Recursively transforms all map keys from strings to keywords.]]></desc>
</keyword>
<keyword name="stringify-keys" type="function" returnType=" " definedIn="clojure.walk">
	<params>
	<param type="function" name="m"/>

	</params>
	<desc><![CDATA[	Recursively transforms all map keys from keywords to strings.]]></desc>
</keyword>
<keyword name="prewalk" type="function" returnType=" " definedIn="clojure.walk">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="form"/>

	</params>
	<desc><![CDATA[	Like postwalk, but does pre-order traversal.]]></desc>
</keyword>
<keyword name="postwalk" type="function" returnType=" " definedIn="clojure.walk">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="form"/>

	</params>
	<desc><![CDATA[	Performs a depth-first, post-order traversal of form.  Calls f on
  each sub-form, uses f's return value in place of the original.
  Recognizes all Clojure data structures. Consumes seqs as with doall.]]></desc>
</keyword>
<keyword name="postwalk-replace" type="function" returnType=" " definedIn="clojure.walk">
	<params>
	<param type="function" name="smap"/>
	<param type="function" name="form"/>

	</params>
	<desc><![CDATA[	Recursively transforms form by replacing keys in smap with their
  values.  Like clojure/replace but works on any data structure.  Does
  replacement at the leaves of the tree first.]]></desc>
</keyword>
<keyword name="macroexpand-all" type="function" returnType=" " definedIn="clojure.walk">
	<params>
	<param type="function" name="form"/>

	</params>
	<desc><![CDATA[	Recursively performs all possible macroexpansions in form.]]></desc>
</keyword>
<keyword name="prewalk-replace" type="function" returnType=" " definedIn="clojure.walk">
	<params>
	<param type="function" name="smap"/>
	<param type="function" name="form"/>

	</params>
	<desc><![CDATA[	Recursively transforms form by replacing keys in smap with their
  values.  Like clojure/replace but works on any data structure.  Does
  replacement at the root of the tree first.]]></desc>
</keyword>
<keyword name="repl-exception" type="function" returnType=" " definedIn="clojure.main">
	<params>
	<param type="function" name="throwable"/>

	</params>
	<desc><![CDATA[	Returns the root cause of throwables]]></desc>
</keyword>
<keyword name="stack-element-str" type="function" returnType=" " definedIn="clojure.main">
	<params>
	<param type="function" name="el"/>

	</params>
	<desc><![CDATA[	Returns a (possibly unmunged) string representation of a StackTraceElement]]></desc>
</keyword>
<keyword name="repl-caught" type="function" returnType=" " definedIn="clojure.main">
	<params>
	<param type="function" name="e"/>

	</params>
	<desc><![CDATA[	Default :caught hook for repl]]></desc>
</keyword>
<keyword name="demunge" type="function" returnType=" " definedIn="clojure.main">
	<params>
	<param type="function" name="fn-name"/>

	</params>
	<desc><![CDATA[	Given a string representation of a fn class,
  as in a stack trace element, returns a readable version.]]></desc>
</keyword>
<keyword name="load-script" type="function" returnType=" " definedIn="clojure.main">
	<params>
	<param type="function" name="path"/>

	</params>
	<desc><![CDATA[	Loads Clojure source from a file or resource given its path. Paths
  beginning with @ or @/ are considered relative to classpath.]]></desc>
</keyword>
<keyword name="skip-whitespace" type="function" returnType=" " definedIn="clojure.main">
	<params>
	<param type="function" name="s"/>

	</params>
	<desc><![CDATA[	Skips whitespace characters on stream s. Returns :line-start, :stream-end,
  or :body to indicate the relative location of the next character on s.
  Interprets comma as whitespace and semicolon as comment to end of line.
  Does not interpret #! as comment to end of line because only one
  character of lookahead is available. The stream must either be an
  instance of LineNumberingPushbackReader or duplicate its behavior of both
  supporting .unread and collapsing all of CR, LF, and CRLF to a single
  \newline.]]></desc>
</keyword>
<keyword name="skip-if-eol" type="function" returnType=" " definedIn="clojure.main">
	<params>
	<param type="function" name="s"/>

	</params>
	<desc><![CDATA[	If the next character on stream s is a newline, skips it, otherwise
  leaves the stream untouched. Returns :line-start, :stream-end, or :body
  to indicate the relative location of the next character on s. The stream
  must either be an instance of LineNumberingPushbackReader or duplicate
  its behavior of both supporting .unread and collapsing all of CR, LF, and
  CRLF to a single \newline.]]></desc>
</keyword>
<keyword name="repl-read" type="function" returnType=" " definedIn="clojure.main">
	<params>
	<param type="function" name="request-prompt"/>
	<param type="function" name="request-exit"/>

	</params>
	<desc><![CDATA[	Default :read hook for repl. Reads from *in* which must either be an
  instance of LineNumberingPushbackReader or duplicate its behavior of both
  supporting .unread and collapsing all of CR, LF, and CRLF into a single
  \newline. repl-read:
    - skips whitespace, then
      - returns request-prompt on start of line, or
      - returns request-exit on end of stream, or
      - reads an object from the input stream, then
        - skips the next input character if it's end of line, then
        - returns the object.]]></desc>
</keyword>
<keyword name="with-bindings" type="function" returnType=" " definedIn="clojure.main">
	<params>
	<param type="function" name="body"/>

	</params>
	<desc><![CDATA[	Executes body in the context of thread-local bindings for several vars
  that often need to be set!: *ns* *warn-on-reflection* *math-context*
  *print-meta* *print-length* *print-level* *compile-path*
  *command-line-args* *1 *2 *3 *e]]></desc>
</keyword>
<keyword name="root-cause" type="function" returnType=" " definedIn="clojure.main">
	<params>
	<param type="function" name="t"/>

	</params>
	<desc><![CDATA[	Returns the initial cause of an exception or error by peeling off all of
  its wrappers]]></desc>
</keyword>
<keyword name="repl-prompt" type="function" returnType=" " definedIn="clojure.main">
	<params>

	</params>
	<desc><![CDATA[	Default :prompt hook for repl]]></desc>
</keyword>
<keyword name="repl" type="function" returnType=" " definedIn="clojure.main">
	<params>
	<param type="function" name="options"/>

	</params>
	<desc><![CDATA[	Generic, reusable, read-eval-print loop. By default, reads from *in*,
  writes to *out*, and prints exception summaries to *err*. If you use the
  default :read hook, *in* must either be an instance of
  LineNumberingPushbackReader or duplicate its behavior of both supporting
  .unread and collapsing CR, LF, and CRLF into a single \newline. Options
  are sequential keyword-value pairs. Available options and their defaults:

     - :init, function of no arguments, initialization hook called with
       bindings for set!-able vars in place.
       default: #()

     - :need-prompt, function of no arguments, called before each
       read-eval-print except the first, the user will be prompted if it
       returns true.
       default: (if (instance? LineNumberingPushbackReader *in*)
                  #(.atLineStart *in*)
                  #(identity true))

     - :prompt, function of no arguments, prompts for more input.
       default: repl-prompt

     - :flush, function of no arguments, flushes output
       default: flush

     - :read, function of two arguments, reads from *in*:
         - returns its first argument to request a fresh prompt
           - depending on need-prompt, this may cause the repl to prompt
             before reading again
         - returns its second argument to request an exit from the repl
         - else returns the next object read from the input stream
       default: repl-read

     - :eval, funtion of one argument, returns the evaluation of its
       argument
       default: eval

     - :print, function of one argument, prints its argument to the output
       default: prn

     - :caught, function of one argument, a throwable, called when
       read, eval, or print throws an exception or error
       default: repl-caught]]></desc>
</keyword>
<keyword name="main" type="function" returnType=" " definedIn="clojure.main">
	<params>
	<param type="function" name="args"/>

	</params>
	<desc><![CDATA[	Usage: java -cp clojure.jar clojure.main [init-opt*] [main-opt] [arg*]

  With no options or args, runs an interactive Read-Eval-Print Loop

  init options:
    -i, --init path     Load a file or resource
    -e, --eval string   Evaluate expressions in string; print non-nil values

  main options:
    -m, --main ns-name  Call the -main function from a namespace with args
    -r, --repl          Run a repl
    path                Run a script from from a file or resource
    -                   Run a script from standard input
    -h, -?, --help      Print this help message and exit

  operation:

    - Establishes thread-local bindings for commonly set!-able vars
    - Enters the user namespace
    - Binds *command-line-args* to a seq of strings containing command line
      args that appear after any main option
    - Runs all init options in order
    - Calls a -main function or runs a repl or script if requested

  The init options may be repeated and mixed freely, but must appear before
  any main option. The appearance of any eval option before running a repl
  suppresses the usual repl greeting message: "Clojure ~(clojure-version)".

  Paths may be absolute or relative in the filesystem or relative to
  classpath. Classpath-relative paths have prefix of @ or @/]]></desc>
</keyword>
<keyword name="sorted-map" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="keyvals"/>

	</params>
	<desc><![CDATA[	keyval => key val
  Returns a new sorted map with supplied mappings.]]></desc>
</keyword>
<keyword name="read-line" type="function" returnType=" " definedIn="clojure.core">
	<params>

	</params>
	<desc><![CDATA[	Reads the next line from stream that is the current value of *in* .]]></desc>
</keyword>
<keyword name="re-pattern" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="s"/>

	</params>
	<desc><![CDATA[	Returns an instance of java.util.regex.Pattern, for use, e.g. in
  re-matcher.]]></desc>
</keyword>
<keyword name="keyword?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Return true if x is a Keyword]]></desc>
</keyword>
<keyword name="unchecked-inc-int" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns a number one greater than x, an int.
  Note - uses a primitive operator subject to overflow.]]></desc>
</keyword>
<keyword name="val" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="e"/>

	</params>
	<desc><![CDATA[	Returns the value in the map entry.]]></desc>
</keyword>
<keyword name="chunked-seq?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="s"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="find-protocol-impl" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="protocol"/>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="vector-of" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="t"/>

	</params>
	<desc><![CDATA[	Creates a new vector of a single primitive type t, where t is one
  of :int :long :float :double :byte :short :char or :boolean. The
  resulting vector complies with the interface of vectors in general,
  but stores the values unboxed internally.

  Optionally takes one or more elements to populate the vector.]]></desc>
</keyword>
<keyword name="vector-of" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="t"/>
	<param type="function" name="elements"/>

	</params>
	<desc><![CDATA[	Creates a new vector of a single primitive type t, where t is one
  of :int :long :float :double :byte :short :char or :boolean. The
  resulting vector complies with the interface of vectors in general,
  but stores the values unboxed internally.

  Optionally takes one or more elements to populate the vector.]]></desc>
</keyword>
<keyword name="object-array" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="size-or-seq"/>

	</params>
	<desc><![CDATA[	Creates an array of objects]]></desc>
</keyword>
<keyword name="max-key" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="k"/>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns the x for which (k x), a number, is greatest.]]></desc>
</keyword>
<keyword name="max-key" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="k"/>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	Returns the x for which (k x), a number, is greatest.]]></desc>
</keyword>
<keyword name="max-key" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="k"/>
	<param type="function" name="x"/>
	<param type="function" name="y"/>
	<param type="function" name="more"/>

	</params>
	<desc><![CDATA[	Returns the x for which (k x), a number, is greatest.]]></desc>
</keyword>
<keyword name="list*" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="args"/>

	</params>
	<desc><![CDATA[	Creates a new list containing the items prepended to the rest, the
  last of which will be treated as a sequence.]]></desc>
</keyword>
<keyword name="list*" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="a"/>
	<param type="function" name="args"/>

	</params>
	<desc><![CDATA[	Creates a new list containing the items prepended to the rest, the
  last of which will be treated as a sequence.]]></desc>
</keyword>
<keyword name="list*" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="a"/>
	<param type="function" name="b"/>
	<param type="function" name="args"/>

	</params>
	<desc><![CDATA[	Creates a new list containing the items prepended to the rest, the
  last of which will be treated as a sequence.]]></desc>
</keyword>
<keyword name="list*" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="a"/>
	<param type="function" name="b"/>
	<param type="function" name="c"/>
	<param type="function" name="args"/>

	</params>
	<desc><![CDATA[	Creates a new list containing the items prepended to the rest, the
  last of which will be treated as a sequence.]]></desc>
</keyword>
<keyword name="list*" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="a"/>
	<param type="function" name="b"/>
	<param type="function" name="c"/>
	<param type="function" name="d"/>
	<param type="function" name="more"/>

	</params>
	<desc><![CDATA[	Creates a new list containing the items prepended to the rest, the
  last of which will be treated as a sequence.]]></desc>
</keyword>
<keyword name="ns-aliases" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="ns"/>

	</params>
	<desc><![CDATA[	Returns a map of the aliases for the namespace.]]></desc>
</keyword>
<keyword name="booleans" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="xs"/>

	</params>
	<desc><![CDATA[	Casts to boolean[]]]></desc>
</keyword>
<keyword name="the-ns" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	If passed a namespace, returns it. Else, when passed a symbol,
  returns the namespace named by it, throwing an exception if not
  found.]]></desc>
</keyword>
<keyword name="==" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns non-nil if nums all have the equivalent
  value (type-independent), otherwise false]]></desc>
</keyword>
<keyword name="==" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	Returns non-nil if nums all have the equivalent
  value (type-independent), otherwise false]]></desc>
</keyword>
<keyword name="==" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>
	<param type="function" name="more"/>

	</params>
	<desc><![CDATA[	Returns non-nil if nums all have the equivalent
  value (type-independent), otherwise false]]></desc>
</keyword>
<keyword name="chunk-buffer" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="capacity"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="longs" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="xs"/>

	</params>
	<desc><![CDATA[	Casts to long[]]]></desc>
</keyword>
<keyword name="shorts" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="xs"/>

	</params>
	<desc><![CDATA[	Casts to shorts[]]]></desc>
</keyword>
<keyword name="instance?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="c"/>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Evaluates x and tests if it is an instance of the class
    c. Returns true or false]]></desc>
</keyword>
<keyword name="format" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="fmt"/>
	<param type="function" name="args"/>

	</params>
	<desc><![CDATA[	Formats a string using java.lang.String.format, see java.util.Formatter for format
  string syntax]]></desc>
</keyword>
<keyword name="sequential?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns true if coll implements Sequential]]></desc>
</keyword>
<keyword name="fn?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns true if x implements Fn, i.e. is an object created via fn.]]></desc>
</keyword>
<keyword name="empty" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns an empty collection of the same category as coll, or nil]]></desc>
</keyword>
<keyword name="bound-fn" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="fntail"/>

	</params>
	<desc><![CDATA[	Returns a function defined by the given fntail, which will install the
  same bindings in effect as in the thread at the time bound-fn was called.
  This may be used to define a helper function which runs on a different
  thread, but needs the same bindings in place.]]></desc>
</keyword>
<keyword name="dorun" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	When lazy sequences are produced via functions that have side
  effects, any effects other than those needed to produce the first
  element in the seq do not occur until the seq is consumed. dorun can
  be used to force any effects. Walks through the successive nexts of
  the seq, does not retain the head and returns nil.]]></desc>
</keyword>
<keyword name="dorun" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="n"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	When lazy sequences are produced via functions that have side
  effects, any effects other than those needed to produce the first
  element in the seq do not occur until the seq is consumed. dorun can
  be used to force any effects. Walks through the successive nexts of
  the seq, does not retain the head and returns nil.]]></desc>
</keyword>
<keyword name="time" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="expr"/>

	</params>
	<desc><![CDATA[	Evaluates expr and prints the time it took.  Returns the value of
 expr.]]></desc>
</keyword>
<keyword name="remove-method" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="multifn"/>
	<param type="function" name="dispatch-val"/>

	</params>
	<desc><![CDATA[	Removes the method of multimethod associated with dispatch-value.]]></desc>
</keyword>
<keyword name="gensym" type="function" returnType=" " definedIn="clojure.core">
	<params>

	</params>
	<desc><![CDATA[	Returns a new symbol with a unique name. If a prefix string is
  supplied, the name is prefix# where # is some unique number. If
  prefix is not supplied, the prefix is 'G__'.]]></desc>
</keyword>
<keyword name="gensym" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="prefix-string"/>

	</params>
	<desc><![CDATA[	Returns a new symbol with a unique name. If a prefix string is
  supplied, the name is prefix# where # is some unique number. If
  prefix is not supplied, the prefix is 'G__'.]]></desc>
</keyword>
<keyword name="not=" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Same as (not (= obj1 obj2))]]></desc>
</keyword>
<keyword name="not=" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	Same as (not (= obj1 obj2))]]></desc>
</keyword>
<keyword name="not=" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>
	<param type="function" name="more"/>

	</params>
	<desc><![CDATA[	Same as (not (= obj1 obj2))]]></desc>
</keyword>
<keyword name="unchecked-multiply" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	Returns the product of x and y, both long.
  Note - uses a primitive operator subject to overflow.]]></desc>
</keyword>
<keyword name="doseq" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="seq-exprs"/>
	<param type="function" name="body"/>

	</params>
	<desc><![CDATA[	Repeatedly executes body (presumably for side-effects) with
  bindings and filtering as provided by "for".  Does not retain
  the head of the sequence. Returns nil.]]></desc>
</keyword>
<keyword name="bit-or" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	Bitwise or]]></desc>
</keyword>
<keyword name="bit-or" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>
	<param type="function" name="more"/>

	</params>
	<desc><![CDATA[	Bitwise or]]></desc>
</keyword>
<keyword name="aset-byte" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="array"/>
	<param type="function" name="idx"/>
	<param type="function" name="val"/>

	</params>
	<desc><![CDATA[	Sets the value at the index/indices. Works on arrays of byte. Returns val.]]></desc>
</keyword>
<keyword name="aset-byte" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="array"/>
	<param type="function" name="idx"/>
	<param type="function" name="idx2"/>
	<param type="function" name="idxv"/>

	</params>
	<desc><![CDATA[	Sets the value at the index/indices. Works on arrays of byte. Returns val.]]></desc>
</keyword>
<keyword name="if-not" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="test"/>
	<param type="function" name="then"/>

	</params>
	<desc><![CDATA[	Evaluates test. If logical false, evaluates and returns then expr, 
  otherwise else expr, if supplied, else nil.]]></desc>
</keyword>
<keyword name="if-not" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="test"/>
	<param type="function" name="then"/>
	<param type="function" name="else"/>

	</params>
	<desc><![CDATA[	Evaluates test. If logical false, evaluates and returns then expr, 
  otherwise else expr, if supplied, else nil.]]></desc>
</keyword>
<keyword name="hash-set" type="function" returnType=" " definedIn="clojure.core">
	<params>

	</params>
	<desc><![CDATA[	Returns a new hash set with supplied keys.]]></desc>
</keyword>
<keyword name="hash-set" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="keys"/>

	</params>
	<desc><![CDATA[	Returns a new hash set with supplied keys.]]></desc>
</keyword>
<keyword name="->Vec" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="am"/>
	<param type="function" name="cnt"/>
	<param type="function" name="shift"/>
	<param type="function" name="root"/>
	<param type="function" name="tail"/>
	<param type="function" name="_meta"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="add-watch" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="reference"/>
	<param type="function" name="key"/>
	<param type="function" name="fn"/>

	</params>
	<desc><![CDATA[	Alpha - subject to change.
  Adds a watch function to an agent/atom/var/ref reference. The watch
  fn must be a fn of 4 args: a key, the reference, its old-state, its
  new-state. Whenever the reference's state might have been changed,
  any registered watches will have their functions called. The watch fn
  will be called synchronously, on the agent's thread if an agent,
  before any pending sends if agent or ref. Note that an atom's or
  ref's state may have changed again prior to the fn call, so use
  old/new-state rather than derefing the reference. Note also that watch
  fns may be called from multiple threads simultaneously. Var watchers
  are triggered only by root binding changes, not thread-local
  set!s. Keys must be unique per reference, and can be used to remove
  the watch with remove-watch, but are otherwise considered opaque by
  the watch mechanism.]]></desc>
</keyword>
<keyword name="unchecked-dec" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns a number one less than x, a long.
  Note - uses a primitive operator subject to overflow.]]></desc>
</keyword>
<keyword name="some" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="pred"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns the first logical true value of (pred x) for any x in coll,
  else nil.  One common idiom is to use a set as pred, for example
  this will return :fred if :fred is in the sequence, otherwise nil:
  (some #{:fred} coll)]]></desc>
</keyword>
<keyword name="nil?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns true if x is nil, false otherwise.]]></desc>
</keyword>
<keyword name="string?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Return true if x is a String]]></desc>
</keyword>
<keyword name="boolean-array" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="size-or-seq"/>

	</params>
	<desc><![CDATA[	Creates an array of booleans]]></desc>
</keyword>
<keyword name="boolean-array" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="size"/>
	<param type="function" name="init-val-or-seq"/>

	</params>
	<desc><![CDATA[	Creates an array of booleans]]></desc>
</keyword>
<keyword name="second" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Same as (first (next x))]]></desc>
</keyword>
<keyword name="letfn" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="fnspecs"/>
	<param type="function" name="body"/>

	</params>
	<desc><![CDATA[	fnspec ==> (fname [params*] exprs) or (fname ([params*] exprs)+)

  Takes a vector of function specs and a body, and generates a set of
  bindings of functions to their names. All of the names are available
  in all of the definitions of the functions, as well as the body.]]></desc>
</keyword>
<keyword name="keys" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="map"/>

	</params>
	<desc><![CDATA[	Returns a sequence of the map's keys.]]></desc>
</keyword>
<keyword name="for" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="seq-exprs"/>
	<param type="function" name="body-expr"/>

	</params>
	<desc><![CDATA[	List comprehension. Takes a vector of one or more
   binding-form/collection-expr pairs, each followed by zero or more
   modifiers, and yields a lazy sequence of evaluations of expr.
   Collections are iterated in a nested fashion, rightmost fastest,
   and nested coll-exprs can refer to bindings created in prior
   binding-forms.  Supported modifiers are: :let [binding-form expr ...],
   :while test, :when test.

  (take 100 (for [x (range 100000000) y (range 1000000) :while (< y x)] [x y]))]]></desc>
</keyword>
<keyword name="long-array" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="size-or-seq"/>

	</params>
	<desc><![CDATA[	Creates an array of longs]]></desc>
</keyword>
<keyword name="long-array" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="size"/>
	<param type="function" name="init-val-or-seq"/>

	</params>
	<desc><![CDATA[	Creates an array of longs]]></desc>
</keyword>
<keyword name="pop-thread-bindings" type="function" returnType=" " definedIn="clojure.core">
	<params>

	</params>
	<desc><![CDATA[	Pop one set of bindings pushed with push-binding before. It is an error to
  pop bindings without pushing before.]]></desc>
</keyword>
<keyword name="error-mode" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="a"/>

	</params>
	<desc><![CDATA[	Returns the error-mode of agent a.  See set-error-mode!]]></desc>
</keyword>
<keyword name="cond" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="clauses"/>

	</params>
	<desc><![CDATA[	Takes a set of test/expr pairs. It evaluates each test one at a
  time.  If a test returns logical true, cond evaluates and returns
  the value of the corresponding expr and doesn't evaluate any of the
  other tests or exprs. (cond) returns nil.]]></desc>
</keyword>
<keyword name="bit-set" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="n"/>

	</params>
	<desc><![CDATA[	Set bit at index n]]></desc>
</keyword>
<keyword name="spit" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="content"/>
	<param type="function" name="options"/>

	</params>
	<desc><![CDATA[	Opposite of slurp.  Opens f with writer, writes content, then
  closes f. Options passed to clojure.java.io/writer.]]></desc>
</keyword>
<keyword name="find-protocol-method" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="protocol"/>
	<param type="function" name="methodk"/>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="fn" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="sigs"/>

	</params>
	<desc><![CDATA[	params => positional-params* , or positional-params* &amp;next-param
  positional-param => binding-form
  next-param => binding-form
  name => symbol

  Defines a function]]></desc>
</keyword>
<keyword name="sorted?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns true if coll implements Sorted]]></desc>
</keyword>
<keyword name="short-array" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="size-or-seq"/>

	</params>
	<desc><![CDATA[	Creates an array of shorts]]></desc>
</keyword>
<keyword name="short-array" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="size"/>
	<param type="function" name="init-val-or-seq"/>

	</params>
	<desc><![CDATA[	Creates an array of shorts]]></desc>
</keyword>
<keyword name="ns-unalias" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="ns"/>
	<param type="function" name="sym"/>

	</params>
	<desc><![CDATA[	Removes the alias for the symbol from the namespace.]]></desc>
</keyword>
<keyword name="ns-publics" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="ns"/>

	</params>
	<desc><![CDATA[	Returns a map of the public intern mappings for the namespace.]]></desc>
</keyword>
<keyword name="char-array" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="size-or-seq"/>

	</params>
	<desc><![CDATA[	Creates an array of chars]]></desc>
</keyword>
<keyword name="char-array" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="size"/>
	<param type="function" name="init-val-or-seq"/>

	</params>
	<desc><![CDATA[	Creates an array of chars]]></desc>
</keyword>
<keyword name="dosync" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="exprs"/>

	</params>
	<desc><![CDATA[	Runs the exprs (in an implicit do) in a transaction that encompasses
  exprs and any nested calls.  Starts a transaction if none is already
  running on this thread. Any uncaught exception will abort the
  transaction and flow out of dosync. The exprs may be run more than
  once, but any effects on Refs will be atomic.]]></desc>
</keyword>
<keyword name="all-ns" type="function" returnType=" " definedIn="clojure.core">
	<params>

	</params>
	<desc><![CDATA[	Returns a sequence of all namespaces.]]></desc>
</keyword>
<keyword name="long" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Coerce to long]]></desc>
</keyword>
<keyword name="with-open" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="bindings"/>
	<param type="function" name="body"/>

	</params>
	<desc><![CDATA[	bindings => [name init ...]

  Evaluates body in a try expression with names bound to the values
  of the inits, and a finally clause that calls (.close name) on each
  name in reverse order.]]></desc>
</keyword>
<keyword name="init-proxy" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="proxy"/>
	<param type="function" name="mappings"/>

	</params>
	<desc><![CDATA[	Takes a proxy instance and a map of strings (which must
  correspond to methods of the proxy superclass/superinterfaces) to
  fns (which must take arguments matching the corresponding method,
  plus an additional (explicit) first arg corresponding to this, and
  sets the proxy's fn map.  Returns the proxy.]]></desc>
</keyword>
<keyword name="add-classpath" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="url"/>

	</params>
	<desc><![CDATA[	DEPRECATED 

  Adds the url (String or URL object) to the classpath per
  URLClassLoader.addURL]]></desc>
</keyword>
<keyword name="false?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns true if x is the value false, false otherwise.]]></desc>
</keyword>
<keyword name="await1" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="a"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="true?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns true if x is the value true, false otherwise.]]></desc>
</keyword>
<keyword name="gen-interface" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="options"/>

	</params>
	<desc><![CDATA[	When compiling, generates compiled bytecode for an interface with
  the given package-qualified :name (which, as all names in these
  parameters, can be a string or symbol), and writes the .class file
  to the *compile-path* directory.  When not compiling, does nothing.
 
  In all subsequent sections taking types, the primitive types can be
  referred to by their Java names (int, float etc), and classes in the
  java.lang package can be used without a package qualifier. All other
  classes must be fully qualified.
 
  Options should be a set of key/value pairs, all except for :name are
  optional:

  :name aname

  The package-qualified name of the class to be generated

  :extends [interface ...]

  One or more interfaces, which will be extended by this interface.

  :methods [ [name [param-types] return-type], ...]

  This parameter is used to specify the signatures of the methods of
  the generated interface.  Do not repeat superinterface signatures
  here.]]></desc>
</keyword>
<keyword name="sync" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="flags-ignored-for-now"/>
	<param type="function" name="body"/>

	</params>
	<desc><![CDATA[	transaction-flags => TBD, pass nil for now

  Runs the exprs (in an implicit do) in a transaction that encompasses
  exprs and any nested calls.  Starts a transaction if none is already
  running on this thread. Any uncaught exception will abort the
  transaction and flow out of sync. The exprs may be run more than
  once, but any effects on Refs will be atomic.]]></desc>
</keyword>
<keyword name="short" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Coerce to short]]></desc>
</keyword>
<keyword name="ns-unmap" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="ns"/>
	<param type="function" name="sym"/>

	</params>
	<desc><![CDATA[	Removes the mappings for the symbol from the namespace.]]></desc>
</keyword>
<keyword name="repeat" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns a lazy (infinite!, or length n if supplied) sequence of xs.]]></desc>
</keyword>
<keyword name="repeat" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="n"/>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns a lazy (infinite!, or length n if supplied) sequence of xs.]]></desc>
</keyword>
<keyword name="zipmap" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="keys"/>
	<param type="function" name="vals"/>

	</params>
	<desc><![CDATA[	Returns a map with the keys mapped to the corresponding vals.]]></desc>
</keyword>
<keyword name="distinct" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a lazy sequence of the elements of coll with duplicates removed]]></desc>
</keyword>
<keyword name="get-in" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="m"/>
	<param type="function" name="ks"/>

	</params>
	<desc><![CDATA[	Returns the value in a nested associative structure,
  where ks is a sequence of ke(ys. Returns nil if the key is not present,
  or the not-found value if supplied.]]></desc>
</keyword>
<keyword name="get-in" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="m"/>
	<param type="function" name="ks"/>
	<param type="function" name="not-found"/>

	</params>
	<desc><![CDATA[	Returns the value in a nested associative structure,
  where ks is a sequence of ke(ys. Returns nil if the key is not present,
  or the not-found value if supplied.]]></desc>
</keyword>
<keyword name="bit-xor" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	Bitwise exclusive or]]></desc>
</keyword>
<keyword name="bit-xor" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>
	<param type="function" name="more"/>

	</params>
	<desc><![CDATA[	Bitwise exclusive or]]></desc>
</keyword>
<keyword name="complement" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>

	</params>
	<desc><![CDATA[	Takes a fn f and returns a fn that takes the same arguments as f,
  has the same effects, if any, and returns the opposite truth value.]]></desc>
</keyword>
<keyword name="let" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="bindings"/>
	<param type="function" name="body"/>

	</params>
	<desc><![CDATA[	binding => binding-form init-expr

  Evaluates the exprs in a lexical context in which the symbols in
  the binding-forms are bound to their respective init-exprs or parts
  therein.]]></desc>
</keyword>
<keyword name="get-validator" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="iref"/>

	</params>
	<desc><![CDATA[	Gets the validator-fn for a var/ref/agent/atom.]]></desc>
</keyword>
<keyword name="dotimes" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="bindings"/>
	<param type="function" name="body"/>

	</params>
	<desc><![CDATA[	bindings => name n

  Repeatedly executes body (presumably for side-effects) with name
  bound to integers from 0 through n-1.]]></desc>
</keyword>
<keyword name="ref-max-history" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="ref"/>

	</params>
	<desc><![CDATA[	Gets the max-history of a ref, or sets it and returns the ref]]></desc>
</keyword>
<keyword name="ref-max-history" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="ref"/>
	<param type="function" name="n"/>

	</params>
	<desc><![CDATA[	Gets the max-history of a ref, or sets it and returns the ref]]></desc>
</keyword>
<keyword name="promise" type="function" returnType=" " definedIn="clojure.core">
	<params>

	</params>
	<desc><![CDATA[	Alpha - subject to change.
  Returns a promise object that can be read with deref/@, and set,
  once only, with deliver. Calls to deref/@ prior to delivery will
  block, unless the variant of deref with timeout is used. All
  subsequent derefs will return the same delivered value without
  blocking. See also - realized?.]]></desc>
</keyword>
<keyword name="defmethod" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="multifn"/>
	<param type="function" name="dispatch-val"/>
	<param type="function" name="fn-tail"/>

	</params>
	<desc><![CDATA[	Creates and installs a new method of multimethod associated with dispatch-value. ]]></desc>
</keyword>
<keyword name="-'" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	If no ys are supplied, returns the negation of x, else subtracts
  the ys from x and returns the result. Supports arbitrary precision.
  See also: -]]></desc>
</keyword>
<keyword name="-'" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	If no ys are supplied, returns the negation of x, else subtracts
  the ys from x and returns the result. Supports arbitrary precision.
  See also: -]]></desc>
</keyword>
<keyword name="-'" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>
	<param type="function" name="more"/>

	</params>
	<desc><![CDATA[	If no ys are supplied, returns the negation of x, else subtracts
  the ys from x and returns the result. Supports arbitrary precision.
  See also: -]]></desc>
</keyword>
<keyword name="pop!" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Alpha - subject to change.
  Removes the last item from a transient vector. If
  the collection is empty, throws an exception. Returns coll]]></desc>
</keyword>
<keyword name="derive" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="tag"/>
	<param type="function" name="parent"/>

	</params>
	<desc><![CDATA[	Establishes a parent/child relationship between parent and
  tag. Parent must be a namespace-qualified symbol or keyword and
  child can be either a namespace-qualified symbol or keyword or a
  class. h must be a hierarchy obtained from make-hierarchy, if not
  supplied defaults to, and modifies, the global hierarchy.]]></desc>
</keyword>
<keyword name="derive" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="h"/>
	<param type="function" name="tag"/>
	<param type="function" name="parent"/>

	</params>
	<desc><![CDATA[	Establishes a parent/child relationship between parent and
  tag. Parent must be a namespace-qualified symbol or keyword and
  child can be either a namespace-qualified symbol or keyword or a
  class. h must be a hierarchy obtained from make-hierarchy, if not
  supplied defaults to, and modifies, the global hierarchy.]]></desc>
</keyword>
<keyword name="aset-float" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="array"/>
	<param type="function" name="idx"/>
	<param type="function" name="val"/>

	</params>
	<desc><![CDATA[	Sets the value at the index/indices. Works on arrays of float. Returns val.]]></desc>
</keyword>
<keyword name="aset-float" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="array"/>
	<param type="function" name="idx"/>
	<param type="function" name="idx2"/>
	<param type="function" name="idxv"/>

	</params>
	<desc><![CDATA[	Sets the value at the index/indices. Works on arrays of float. Returns val.]]></desc>
</keyword>
<keyword name="extend" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="atype"/>
	<param type="function" name="proto+mmaps"/>

	</params>
	<desc><![CDATA[	Implementations of protocol methods can be provided using the extend construct:

  (extend AType
    AProtocol
     {:foo an-existing-fn
      :bar (fn [a b] ...)
      :baz (fn ([a]...) ([a b] ...)...)}
    BProtocol 
      {...} 
    ...)
 
  extend takes a type/class (or interface, see below), and one or more
  protocol + method map pairs. It will extend the polymorphism of the
  protocol's methods to call the supplied methods when an AType is
  provided as the first argument. 

  Method maps are maps of the keyword-ized method names to ordinary
  fns. This facilitates easy reuse of existing fns and fn maps, for
  code reuse/mixins without derivation or composition. You can extend
  an interface to a protocol. This is primarily to facilitate interop
  with the host (e.g. Java) but opens the door to incidental multiple
  inheritance of implementation since a class can inherit from more
  than one interface, both of which extend the protocol. It is TBD how
  to specify which impl to use. You can extend a protocol on nil.

  If you are supplying the definitions explicitly (i.e. not reusing
  exsting functions or mixin maps), you may find it more convenient to
  use the extend-type or extend-protocol macros.

  Note that multiple independent extend clauses can exist for the same
  type, not all protocols need be defined in a single extend call.

  See also:
  extends?, satisfies?, extenders]]></desc>
</keyword>
<keyword name="-reset-methods" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="protocol"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="lazy-cat" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="colls"/>

	</params>
	<desc><![CDATA[	Expands to code which yields a lazy sequence of the concatenation
  of the supplied colls.  Each coll expr is not evaluated until it is
  needed. 

  (lazy-cat xs ys zs) === (concat (lazy-seq xs) (lazy-seq ys) (lazy-seq zs))]]></desc>
</keyword>
<keyword name="commute" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="ref"/>
	<param type="function" name="fun"/>
	<param type="function" name="args"/>

	</params>
	<desc><![CDATA[	Must be called in a transaction. Sets the in-transaction-value of
  ref to:

  (apply fun in-transaction-value-of-ref args)

  and returns the in-transaction-value of ref.

  At the commit point of the transaction, sets the value of ref to be:

  (apply fun most-recently-committed-value-of-ref args)

  Thus fun should be commutative, or, failing that, you must accept
  last-one-in-wins behavior.  commute allows for more concurrency than
  ref-set.]]></desc>
</keyword>
<keyword name="defstruct" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="name"/>
	<param type="function" name="keys"/>

	</params>
	<desc><![CDATA[	Same as (def name (create-struct keys...))]]></desc>
</keyword>
<keyword name="with-in-str" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="s"/>
	<param type="function" name="body"/>

	</params>
	<desc><![CDATA[	Evaluates body in a context in which *in* is bound to a fresh
  StringReader initialized with the string s.]]></desc>
</keyword>
<keyword name="partition-by" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Applies f to each value in coll, splitting it each time f returns
   a new value.  Returns a lazy seq of partitions.]]></desc>
</keyword>
<keyword name="rem" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="num"/>
	<param type="function" name="div"/>

	</params>
	<desc><![CDATA[	remainder of dividing numerator by denominator.]]></desc>
</keyword>
<keyword name="odd?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="n"/>

	</params>
	<desc><![CDATA[	Returns true if n is odd, throws an exception if n is not an integer]]></desc>
</keyword>
<keyword name="symbol?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Return true if x is a Symbol]]></desc>
</keyword>
<keyword name="thread-bound?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="vars"/>

	</params>
	<desc><![CDATA[	Returns true if all of the vars provided as arguments have thread-local bindings.
   Implies that set!'ing the provided vars will succeed.  Returns true if no vars are provided.]]></desc>
</keyword>
<keyword name="proxy-call-with-super" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="call"/>
	<param type="function" name="this"/>
	<param type="function" name="meth"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="ns-interns" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="ns"/>

	</params>
	<desc><![CDATA[	Returns a map of the intern mappings for the namespace.]]></desc>
</keyword>
<keyword name="re-matches" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="re"/>
	<param type="function" name="s"/>

	</params>
	<desc><![CDATA[	Returns the match, if any, of string to pattern, using
  java.util.regex.Matcher.matches().  Uses re-groups to return the
  groups.]]></desc>
</keyword>
<keyword name="split-with" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="pred"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a vector of [(take-while pred coll) (drop-while pred coll)]]]></desc>
</keyword>
<keyword name="munge" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="s"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="loop" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="bindings"/>
	<param type="function" name="body"/>

	</params>
	<desc><![CDATA[	Evaluates the exprs in a lexical context in which the symbols in
  the binding-forms are bound to their respective init-exprs or parts
  therein. Acts as a recur target.]]></desc>
</keyword>
<keyword name="future-done?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>

	</params>
	<desc><![CDATA[	Returns true if future f is done]]></desc>
</keyword>
<keyword name="next" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a seq of the items after the first. Calls seq on its
  argument.  If there are no more items, returns nil.]]></desc>
</keyword>
<keyword name="import" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="import-symbols-or-lists"/>

	</params>
	<desc><![CDATA[	import-list => (package-symbol class-name-symbols*)

  For each name in class-name-symbols, adds a mapping from name to the
  class named by package.name to the current namespace. Use :import in the ns
  macro in preference to calling this directly.]]></desc>
</keyword>
<keyword name="deliver" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="promise"/>
	<param type="function" name="val"/>

	</params>
	<desc><![CDATA[	Alpha - subject to change.
  Delivers the supplied value to the promise, releasing any pending
  derefs. A subsequent call to deliver on a promise will throw an exception.]]></desc>
</keyword>
<keyword name="symbol" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="name"/>

	</params>
	<desc><![CDATA[	Returns a Symbol with the given namespace and name.]]></desc>
</keyword>
<keyword name="symbol" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="ns"/>
	<param type="function" name="name"/>

	</params>
	<desc><![CDATA[	Returns a Symbol with the given namespace and name.]]></desc>
</keyword>
<keyword name="vals" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="map"/>

	</params>
	<desc><![CDATA[	Returns a sequence of the map's values.]]></desc>
</keyword>
<keyword name="->ArrayChunk" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="am"/>
	<param type="function" name="arr"/>
	<param type="function" name="off"/>
	<param type="function" name="end"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="select-keys" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="map"/>
	<param type="function" name="keyseq"/>

	</params>
	<desc><![CDATA[	Returns a map containing only those entries in map whose key is in keys]]></desc>
</keyword>
<keyword name="re-matcher" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="re"/>
	<param type="function" name="s"/>

	</params>
	<desc><![CDATA[	Returns an instance of java.util.regex.Matcher, for use, e.g. in
  re-find.]]></desc>
</keyword>
<keyword name="rand" type="function" returnType=" " definedIn="clojure.core">
	<params>

	</params>
	<desc><![CDATA[	Returns a random floating point number between 0 (inclusive) and
  n (default 1) (exclusive).]]></desc>
</keyword>
<keyword name="rand" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="n"/>

	</params>
	<desc><![CDATA[	Returns a random floating point number between 0 (inclusive) and
  n (default 1) (exclusive).]]></desc>
</keyword>
<keyword name="deref" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="ref"/>

	</params>
	<desc><![CDATA[	Also reader macro: @ref/@agent/@var/@atom/@delay/@future/@promise. Within a transaction,
  returns the in-transaction-value of ref, else returns the
  most-recently-committed value of ref. When applied to a var, agent
  or atom, returns its current state. When applied to a delay, forces
  it if not already forced. When applied to a future, will block if
  computation not complete. When applied to a promise, will block
  until a value is delivered.  The variant taking a timeout can be
  used for blocking references (futures and promises), and will return
  timeout-val if the timeout (in milliseconds) is reached before a
  value is available. See also - realized?.]]></desc>
</keyword>
<keyword name="deref" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="ref"/>
	<param type="function" name="timeout-ms"/>
	<param type="function" name="timeout-val"/>

	</params>
	<desc><![CDATA[	Also reader macro: @ref/@agent/@var/@atom/@delay/@future/@promise. Within a transaction,
  returns the in-transaction-value of ref, else returns the
  most-recently-committed value of ref. When applied to a var, agent
  or atom, returns its current state. When applied to a delay, forces
  it if not already forced. When applied to a future, will block if
  computation not complete. When applied to a promise, will block
  until a value is delivered.  The variant taking a timeout can be
  used for blocking references (futures and promises), and will return
  timeout-val if the timeout (in milliseconds) is reached before a
  value is available. See also - realized?.]]></desc>
</keyword>
<keyword name="unchecked-inc" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns a number one greater than x, a long.
  Note - uses a primitive operator subject to overflow.]]></desc>
</keyword>
<keyword name="read" type="function" returnType=" " definedIn="clojure.core">
	<params>

	</params>
	<desc><![CDATA[	Reads the next object from stream, which must be an instance of
  java.io.PushbackReader or some derivee.  stream defaults to the
  current value of *in* .]]></desc>
</keyword>
<keyword name="read" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="stream"/>

	</params>
	<desc><![CDATA[	Reads the next object from stream, which must be an instance of
  java.io.PushbackReader or some derivee.  stream defaults to the
  current value of *in* .]]></desc>
</keyword>
<keyword name="read" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="stream"/>
	<param type="function" name="eof-error?"/>
	<param type="function" name="eof-value"/>

	</params>
	<desc><![CDATA[	Reads the next object from stream, which must be an instance of
  java.io.PushbackReader or some derivee.  stream defaults to the
  current value of *in* .]]></desc>
</keyword>
<keyword name="read" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="stream"/>
	<param type="function" name="eof-error?"/>
	<param type="function" name="eof-value"/>
	<param type="function" name="recursive?"/>

	</params>
	<desc><![CDATA[	Reads the next object from stream, which must be an instance of
  java.io.PushbackReader or some derivee.  stream defaults to the
  current value of *in* .]]></desc>
</keyword>
<keyword name="sequence" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Coerces coll to a (possibly empty) sequence, if it is not already
  one. Will not force a lazy seq. (sequence nil) yields ()]]></desc>
</keyword>
<keyword name="make-hierarchy" type="function" returnType=" " definedIn="clojure.core">
	<params>

	</params>
	<desc><![CDATA[	Creates a hierarchy object for use with derive, isa? etc.]]></desc>
</keyword>
<keyword name="+" type="function" returnType=" " definedIn="clojure.core">
	<params>

	</params>
	<desc><![CDATA[	Returns the sum of nums. (+) returns 0. Does not auto-promote
  longs, will throw on overflow. See also: +']]></desc>
</keyword>
<keyword name="+" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns the sum of nums. (+) returns 0. Does not auto-promote
  longs, will throw on overflow. See also: +']]></desc>
</keyword>
<keyword name="+" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	Returns the sum of nums. (+) returns 0. Does not auto-promote
  longs, will throw on overflow. See also: +']]></desc>
</keyword>
<keyword name="+" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>
	<param type="function" name="more"/>

	</params>
	<desc><![CDATA[	Returns the sum of nums. (+) returns 0. Does not auto-promote
  longs, will throw on overflow. See also: +']]></desc>
</keyword>
<keyword name="number?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns true if x is a Number]]></desc>
</keyword>
<keyword name="assoc!" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>
	<param type="function" name="key"/>
	<param type="function" name="val"/>

	</params>
	<desc><![CDATA[	Alpha - subject to change.
  When applied to a transient map, adds mapping of key(s) to
  val(s). When applied to a transient vector, sets the val at index.
  Note - index must be <= (count vector). Returns coll.]]></desc>
</keyword>
<keyword name="assoc!" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>
	<param type="function" name="key"/>
	<param type="function" name="val"/>
	<param type="function" name="kvs"/>

	</params>
	<desc><![CDATA[	Alpha - subject to change.
  When applied to a transient map, adds mapping of key(s) to
  val(s). When applied to a transient vector, sets the val at index.
  Note - index must be <= (count vector). Returns coll.]]></desc>
</keyword>
<keyword name="descendants" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="tag"/>

	</params>
	<desc><![CDATA[	Returns the immediate and indirect children of tag, through a
  relationship established via derive. h must be a hierarchy obtained
  from make-hierarchy, if not supplied defaults to the global
  hierarchy. Note: does not work on Java type inheritance
  relationships.]]></desc>
</keyword>
<keyword name="descendants" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="h"/>
	<param type="function" name="tag"/>

	</params>
	<desc><![CDATA[	Returns the immediate and indirect children of tag, through a
  relationship established via derive. h must be a hierarchy obtained
  from make-hierarchy, if not supplied defaults to the global
  hierarchy. Note: does not work on Java type inheritance
  relationships.]]></desc>
</keyword>
<keyword name="into-array" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="aseq"/>

	</params>
	<desc><![CDATA[	Returns an array with components set to the values in aseq. The array's
  component type is type if provided, or the type of the first value in
  aseq if present, or Object. All values in aseq must be compatible with
  the component type. Class objects for the primitive types can be obtained
  using, e.g., Integer/TYPE.]]></desc>
</keyword>
<keyword name="into-array" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="type"/>
	<param type="function" name="aseq"/>

	</params>
	<desc><![CDATA[	Returns an array with components set to the values in aseq. The array's
  component type is type if provided, or the type of the first value in
  aseq if present, or Object. All values in aseq must be compatible with
  the component type. Class objects for the primitive types can be obtained
  using, e.g., Integer/TYPE.]]></desc>
</keyword>
<keyword name="last" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Return the last item in coll, in linear time]]></desc>
</keyword>
<keyword name="some-fn" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="p"/>

	</params>
	<desc><![CDATA[	Takes a set of predicates and returns a function f that returns the first logical true value
  returned by one of its composing predicates against any of its arguments, else it returns
  logical false. Note that f is short-circuiting in that it will stop execution on the first
  argument that triggers a logical true result against the original predicates.]]></desc>
</keyword>
<keyword name="some-fn" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="p1"/>
	<param type="function" name="p2"/>

	</params>
	<desc><![CDATA[	Takes a set of predicates and returns a function f that returns the first logical true value
  returned by one of its composing predicates against any of its arguments, else it returns
  logical false. Note that f is short-circuiting in that it will stop execution on the first
  argument that triggers a logical true result against the original predicates.]]></desc>
</keyword>
<keyword name="some-fn" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="p1"/>
	<param type="function" name="p2"/>
	<param type="function" name="p3"/>

	</params>
	<desc><![CDATA[	Takes a set of predicates and returns a function f that returns the first logical true value
  returned by one of its composing predicates against any of its arguments, else it returns
  logical false. Note that f is short-circuiting in that it will stop execution on the first
  argument that triggers a logical true result against the original predicates.]]></desc>
</keyword>
<keyword name="some-fn" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="p1"/>
	<param type="function" name="p2"/>
	<param type="function" name="p3"/>
	<param type="function" name="ps"/>

	</params>
	<desc><![CDATA[	Takes a set of predicates and returns a function f that returns the first logical true value
  returned by one of its composing predicates against any of its arguments, else it returns
  logical false. Note that f is short-circuiting in that it will stop execution on the first
  argument that triggers a logical true result against the original predicates.]]></desc>
</keyword>
<keyword name="unchecked-negate" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns the negation of x, a long.
  Note - uses a primitive operator subject to overflow.]]></desc>
</keyword>
<keyword name="integer?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="n"/>

	</params>
	<desc><![CDATA[	Returns true if n is an integer]]></desc>
</keyword>
<keyword name="defrecord" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="name"/>
	<param type="function" name="[fields]"/>
	<param type="function" name="opts+specs"/>

	</params>
	<desc><![CDATA[	Alpha - subject to change
  
  (defrecord name [fields*]  options* specs*)
  
  Currently there are no options.

  Each spec consists of a protocol or interface name followed by zero
  or more method bodies:

  protocol-or-interface-or-Object
  (methodName [args*] body)*

  Dynamically generates compiled bytecode for class with the given
  name, in a package with the same name as the current namespace, the
  given fields, and, optionally, methods for protocols and/or
  interfaces.

  The class will have the (immutable) fields named by
  fields, which can have type hints. Protocols/interfaces and methods
  are optional. The only methods that can be supplied are those
  declared in the protocols/interfaces.  Note that method bodies are
  not closures, the local environment includes only the named fields,
  and those fields can be accessed directy.

  Method definitions take the form:

  (methodname [args*] body)

  The argument and return types can be hinted on the arg and
  methodname symbols. If not supplied, they will be inferred, so type
  hints should be reserved for disambiguation.

  Methods should be supplied for all methods of the desired
  protocol(s) and interface(s). You can also define overrides for
  methods of Object. Note that a parameter must be supplied to
  correspond to the target object ('this' in Java parlance). Thus
  methods for interfaces will take one more argument than do the
  interface declarations. Note also that recur calls to the method
  head should *not* pass the target object, it will be supplied
  automatically and can not be substituted.

  In the method bodies, the (unqualified) name can be used to name the
  class (for calls to new, instance? etc).

  The class will have implementations of several (clojure.lang)
  interfaces generated automatically: IObj (metadata support) and
  IPersistentMap, and all of their superinterfaces.

  In addition, defrecord will define type-and-value-based =,
  and will defined Java .hashCode and .equals consistent with the
  contract for java.util.Map.

  When AOT compiling, generates compiled bytecode for a class with the
  given name (a symbol), prepends the current ns as the package, and
  writes the .class file to the *compile-path* directory.

  Two constructors will be defined, one taking the designated fields
  followed by a metadata map (nil for none) and an extension field
  map (nil for none), and one taking only the fields (using nil for
  meta and extension fields).]]></desc>
</keyword>
<keyword name="alter" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="ref"/>
	<param type="function" name="fun"/>
	<param type="function" name="args"/>

	</params>
	<desc><![CDATA[	Must be called in a transaction. Sets the in-transaction-value of
  ref to:

  (apply fun in-transaction-value-of-ref args)

  and returns the in-transaction-value of ref.]]></desc>
</keyword>
<keyword name="prn" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="more"/>

	</params>
	<desc><![CDATA[	Same as pr followed by (newline). Observes *flush-on-newline*]]></desc>
</keyword>
<keyword name="with-meta" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="obj"/>
	<param type="function" name="m"/>

	</params>
	<desc><![CDATA[	Returns an object of the same type and value as obj, with
    map m as its metadata.]]></desc>
</keyword>
<keyword name="with-out-str" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="body"/>

	</params>
	<desc><![CDATA[	Evaluates exprs in a context in which *out* is bound to a fresh
  StringWriter.  Returns the string created by any nested printing
  calls.]]></desc>
</keyword>
<keyword name="floats" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="xs"/>

	</params>
	<desc><![CDATA[	Casts to float[]]]></desc>
</keyword>
<keyword name="*" type="function" returnType=" " definedIn="clojure.core">
	<params>

	</params>
	<desc><![CDATA[	Returns the product of nums. (*) returns 1. Does not auto-promote
  longs, will throw on overflow. See also: *']]></desc>
</keyword>
<keyword name="*" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns the product of nums. (*) returns 1. Does not auto-promote
  longs, will throw on overflow. See also: *']]></desc>
</keyword>
<keyword name="*" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	Returns the product of nums. (*) returns 1. Does not auto-promote
  longs, will throw on overflow. See also: *']]></desc>
</keyword>
<keyword name="*" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>
	<param type="function" name="more"/>

	</params>
	<desc><![CDATA[	Returns the product of nums. (*) returns 1. Does not auto-promote
  longs, will throw on overflow. See also: *']]></desc>
</keyword>
<keyword name="when-not" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="test"/>
	<param type="function" name="body"/>

	</params>
	<desc><![CDATA[	Evaluates test. If logical false, evaluates body in an implicit do.]]></desc>
</keyword>
<keyword name="butlast" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Return a seq of all but the last item in coll, in linear time]]></desc>
</keyword>
<keyword name="-" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	If no ys are supplied, returns the negation of x, else subtracts
  the ys from x and returns the result. Does not auto-promote
  longs, will throw on overflow. See also: -']]></desc>
</keyword>
<keyword name="-" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	If no ys are supplied, returns the negation of x, else subtracts
  the ys from x and returns the result. Does not auto-promote
  longs, will throw on overflow. See also: -']]></desc>
</keyword>
<keyword name="-" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>
	<param type="function" name="more"/>

	</params>
	<desc><![CDATA[	If no ys are supplied, returns the negation of x, else subtracts
  the ys from x and returns the result. Does not auto-promote
  longs, will throw on overflow. See also: -']]></desc>
</keyword>
<keyword name="->>" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="form"/>

	</params>
	<desc><![CDATA[	Threads the expr through the forms. Inserts x as the
  last item in the first form, making a list of it if it is not a
  list already. If there are more forms, inserts the first form as the
  last item in second form, etc.]]></desc>
</keyword>
<keyword name="->>" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="form"/>
	<param type="function" name="more"/>

	</params>
	<desc><![CDATA[	Threads the expr through the forms. Inserts x as the
  last item in the first form, making a list of it if it is not a
  list already. If there are more forms, inserts the first form as the
  last item in second form, etc.]]></desc>
</keyword>
<keyword name="reversible?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns true if coll implements Reversible]]></desc>
</keyword>
<keyword name="rseq" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="rev"/>

	</params>
	<desc><![CDATA[	Returns, in constant time, a seq of the items in rev (which
  can be a vector or sorted-map), in reverse order. If rev is empty returns nil]]></desc>
</keyword>
<keyword name="send-off" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="a"/>
	<param type="function" name="f"/>
	<param type="function" name="args"/>

	</params>
	<desc><![CDATA[	Dispatch a potentially blocking action to an agent. Returns the
  agent immediately. Subsequently, in a separate thread, the state of
  the agent will be set to the value of:

  (apply action-fn state-of-agent args)]]></desc>
</keyword>
<keyword name="seq?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Return true if x implements ISeq]]></desc>
</keyword>
<keyword name="refer-clojure" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="filters"/>

	</params>
	<desc><![CDATA[	Same as (refer 'clojure.core <filters>)]]></desc>
</keyword>
<keyword name="identical?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	Tests if 2 arguments are the same object]]></desc>
</keyword>
<keyword name=".." type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="form"/>

	</params>
	<desc><![CDATA[	form => fieldName-symbol or (instanceMethodName-symbol args*)

  Expands into a member access (.) of the first member on the first
  argument, followed by the next member on the result, etc. For
  instance:

  (.. System (getProperties) (get "os.name"))

  expands to:

  (. (. System (getProperties)) (get "os.name"))

  but is easier to write, read, and understand.]]></desc>
</keyword>
<keyword name=".." type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="form"/>
	<param type="function" name="more"/>

	</params>
	<desc><![CDATA[	form => fieldName-symbol or (instanceMethodName-symbol args*)

  Expands into a member access (.) of the first member on the first
  argument, followed by the next member on the result, etc. For
  instance:

  (.. System (getProperties) (get "os.name"))

  expands to:

  (. (. System (getProperties)) (get "os.name"))

  but is easier to write, read, and understand.]]></desc>
</keyword>
<keyword name="print" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="more"/>

	</params>
	<desc><![CDATA[	Prints the object(s) to the output stream that is the current value
  of *out*.  print and println produce output for human consumption.]]></desc>
</keyword>
<keyword name="vary-meta" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="obj"/>
	<param type="function" name="f"/>
	<param type="function" name="args"/>

	</params>
	<desc><![CDATA[	Returns an object of the same type and value as obj, with
  (apply f (meta obj) args) as its metadata.]]></desc>
</keyword>
<keyword name="with-loading-context" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="body"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="agent-error" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="a"/>

	</params>
	<desc><![CDATA[	Returns the exception thrown during an asynchronous action of the
  agent if the agent is failed.  Returns nil if the agent is not
  failed.]]></desc>
</keyword>
<keyword name="bit-flip" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="n"/>

	</params>
	<desc><![CDATA[	Flip bit at index n]]></desc>
</keyword>
<keyword name="zero?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns true if num is zero, else false]]></desc>
</keyword>
<keyword name="bit-and" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	Bitwise and]]></desc>
</keyword>
<keyword name="bit-and" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>
	<param type="function" name="more"/>

	</params>
	<desc><![CDATA[	Bitwise and]]></desc>
</keyword>
<keyword name="future" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="body"/>

	</params>
	<desc><![CDATA[	Takes a body of expressions and yields a future object that will
  invoke the body in another thread, and will cache the result and
  return it on all subsequent calls to deref/@. If the computation has
  not yet finished, calls to deref/@ will block, unless the variant of
  deref with timeout is used. See also - realized?.]]></desc>
</keyword>
<keyword name="re-groups" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="m"/>

	</params>
	<desc><![CDATA[	Returns the groups from the most recent match/find. If there are no
  nested groups, returns a string of the entire match. If there are
  nested groups, returns a vector of the groups, the first element
  being the entire match.]]></desc>
</keyword>
<keyword name="newline" type="function" returnType=" " definedIn="clojure.core">
	<params>

	</params>
	<desc><![CDATA[	Writes a platform-specific newline to *out*]]></desc>
</keyword>
<keyword name="replicate" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="n"/>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	DEPRECATED: Use 'repeat' instead.
   Returns a lazy seq of n xs.]]></desc>
</keyword>
<keyword name="keep-indexed" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a lazy sequence of the non-nil results of (f index item). Note,
  this means false return values will be included.  f must be free of
  side-effects.]]></desc>
</keyword>
<keyword name="char?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Return true if x is a Character]]></desc>
</keyword>
<keyword name="distinct?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns true if no two of the arguments are =]]></desc>
</keyword>
<keyword name="distinct?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	Returns true if no two of the arguments are =]]></desc>
</keyword>
<keyword name="distinct?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>
	<param type="function" name="more"/>

	</params>
	<desc><![CDATA[	Returns true if no two of the arguments are =]]></desc>
</keyword>
<keyword name="remove-ns" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="sym"/>

	</params>
	<desc><![CDATA[	Removes the namespace named by the symbol. Use with caution.
  Cannot be used to remove the clojure namespace.]]></desc>
</keyword>
<keyword name="ratio?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="n"/>

	</params>
	<desc><![CDATA[	Returns true if n is a Ratio]]></desc>
</keyword>
<keyword name="xml-seq" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="root"/>

	</params>
	<desc><![CDATA[	A tree seq on the xml elements as per xml/parse]]></desc>
</keyword>
<keyword name="vec" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Creates a new vector containing the contents of coll.]]></desc>
</keyword>
<keyword name="concat" type="function" returnType=" " definedIn="clojure.core">
	<params>

	</params>
	<desc><![CDATA[	Returns a lazy seq representing the concatenation of the elements in the supplied colls.]]></desc>
</keyword>
<keyword name="concat" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns a lazy seq representing the concatenation of the elements in the supplied colls.]]></desc>
</keyword>
<keyword name="concat" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	Returns a lazy seq representing the concatenation of the elements in the supplied colls.]]></desc>
</keyword>
<keyword name="concat" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>
	<param type="function" name="zs"/>

	</params>
	<desc><![CDATA[	Returns a lazy seq representing the concatenation of the elements in the supplied colls.]]></desc>
</keyword>
<keyword name="update-in" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="m"/>
	<param type="function" name="[k &amp;ks]"/>
	<param type="function" name="f"/>
	<param type="function" name="args"/>

	</params>
	<desc><![CDATA[	'Updates' a value in a nested associative structure, where ks is a
  sequence of keys and f is a function that will take the old value
  and any supplied args and return the new value, and returns a new
  nested structure.  If any levels do not exist, hash-maps will be
  created.]]></desc>
</keyword>
<keyword name="vector" type="function" returnType=" " definedIn="clojure.core">
	<params>

	</params>
	<desc><![CDATA[	Creates a new vector containing the args.]]></desc>
</keyword>
<keyword name="vector" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="a"/>

	</params>
	<desc><![CDATA[	Creates a new vector containing the args.]]></desc>
</keyword>
<keyword name="vector" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="a"/>
	<param type="function" name="b"/>

	</params>
	<desc><![CDATA[	Creates a new vector containing the args.]]></desc>
</keyword>
<keyword name="vector" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="a"/>
	<param type="function" name="b"/>
	<param type="function" name="c"/>

	</params>
	<desc><![CDATA[	Creates a new vector containing the args.]]></desc>
</keyword>
<keyword name="vector" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="a"/>
	<param type="function" name="b"/>
	<param type="function" name="c"/>
	<param type="function" name="d"/>

	</params>
	<desc><![CDATA[	Creates a new vector containing the args.]]></desc>
</keyword>
<keyword name="vector" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="a"/>
	<param type="function" name="b"/>
	<param type="function" name="c"/>
	<param type="function" name="d"/>
	<param type="function" name="args"/>

	</params>
	<desc><![CDATA[	Creates a new vector containing the args.]]></desc>
</keyword>
<keyword name="with-bindings*" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="binding-map"/>
	<param type="function" name="f"/>
	<param type="function" name="args"/>

	</params>
	<desc><![CDATA[	Takes a map of Var/value pairs. Installs for the given Vars the associated
  values as thread-local bindings. Then calls f with the supplied arguments.
  Pops the installed bindings after f returned. Returns whatever f returns.]]></desc>
</keyword>
<keyword name="conj" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	conj[oin]. Returns a new collection with the xs
    'added'. (conj nil item) returns (item).  The 'addition' may
    happen at different 'places' depending on the concrete type.]]></desc>
</keyword>
<keyword name="conj" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>
	<param type="function" name="x"/>
	<param type="function" name="xs"/>

	</params>
	<desc><![CDATA[	conj[oin]. Returns a new collection with the xs
    'added'. (conj nil item) returns (item).  The 'addition' may
    happen at different 'places' depending on the concrete type.]]></desc>
</keyword>
<keyword name="bases" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="c"/>

	</params>
	<desc><![CDATA[	Returns the immediate superclass and direct interfaces of c, if any]]></desc>
</keyword>
<keyword name="with-redefs" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="bindings"/>
	<param type="function" name="body"/>

	</params>
	<desc><![CDATA[	binding => var-symbol temp-value-expr

  Temporarily redefines Vars while executing the body.  The
  temp-value-exprs will be evaluated and each resulting value will
  replace in parallel the root value of its Var.  After the body is
  executed, the root values of all the Vars will be set back to their
  old values.  These temporary changes will be visible in all threads.
  Useful for mocking out functions during testing.]]></desc>
</keyword>
<keyword name="/" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	If no denominators are supplied, returns 1/numerator,
  else returns numerator divided by all of the denominators.]]></desc>
</keyword>
<keyword name="/" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	If no denominators are supplied, returns 1/numerator,
  else returns numerator divided by all of the denominators.]]></desc>
</keyword>
<keyword name="/" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>
	<param type="function" name="more"/>

	</params>
	<desc><![CDATA[	If no denominators are supplied, returns 1/numerator,
  else returns numerator divided by all of the denominators.]]></desc>
</keyword>
<keyword name="unchecked-add" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	Returns the sum of x and y, both long.
  Note - uses a primitive operator subject to overflow.]]></desc>
</keyword>
<keyword name="ref-set" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="ref"/>
	<param type="function" name="val"/>

	</params>
	<desc><![CDATA[	Must be called in a transaction. Sets the value of ref.
  Returns val.]]></desc>
</keyword>
<keyword name="assoc" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="map"/>
	<param type="function" name="key"/>
	<param type="function" name="val"/>

	</params>
	<desc><![CDATA[	assoc[iate]. When applied to a map, returns a new map of the
    same (hashed/sorted) type, that contains the mapping of key(s) to
    val(s). When applied to a vector, returns a new vector that
    contains val at index. Note - index must be <= (count vector).]]></desc>
</keyword>
<keyword name="assoc" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="map"/>
	<param type="function" name="key"/>
	<param type="function" name="val"/>
	<param type="function" name="kvs"/>

	</params>
	<desc><![CDATA[	assoc[iate]. When applied to a map, returns a new map of the
    same (hashed/sorted) type, that contains the mapping of key(s) to
    val(s). When applied to a vector, returns a new vector that
    contains val at index. Note - index must be <= (count vector).]]></desc>
</keyword>
<keyword name="unchecked-remainder-int" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	Returns the remainder of division of x by y, both int.
  Note - uses a primitive operator subject to truncation.]]></desc>
</keyword>
<keyword name="seque" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="s"/>

	</params>
	<desc><![CDATA[	Creates a queued seq on another (presumably lazy) seq s. The queued
  seq will produce a concrete seq in the background, and can get up to
  n items ahead of the consumer. n-or-q can be an integer n buffer
  size, or an instance of java.util.concurrent BlockingQueue. Note
  that reading from a seque can block if the reader gets ahead of the
  producer.]]></desc>
</keyword>
<keyword name="seque" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="n-or-q"/>
	<param type="function" name="s"/>

	</params>
	<desc><![CDATA[	Creates a queued seq on another (presumably lazy) seq s. The queued
  seq will produce a concrete seq in the background, and can get up to
  n items ahead of the consumer. n-or-q can be an integer n buffer
  size, or an instance of java.util.concurrent BlockingQueue. Note
  that reading from a seque can block if the reader gets ahead of the
  producer.]]></desc>
</keyword>
<keyword name="aset-char" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="array"/>
	<param type="function" name="idx"/>
	<param type="function" name="val"/>

	</params>
	<desc><![CDATA[	Sets the value at the index/indices. Works on arrays of char. Returns val.]]></desc>
</keyword>
<keyword name="aset-char" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="array"/>
	<param type="function" name="idx"/>
	<param type="function" name="idx2"/>
	<param type="function" name="idxv"/>

	</params>
	<desc><![CDATA[	Sets the value at the index/indices. Works on arrays of char. Returns val.]]></desc>
</keyword>
<keyword name="boolean" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Coerce to boolean]]></desc>
</keyword>
<keyword name="read-string" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="s"/>

	</params>
	<desc><![CDATA[	Reads one object from the string s]]></desc>
</keyword>
<keyword name="neg?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns true if num is less than zero, else false]]></desc>
</keyword>
<keyword name="float-array" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="size-or-seq"/>

	</params>
	<desc><![CDATA[	Creates an array of floats]]></desc>
</keyword>
<keyword name="float-array" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="size"/>
	<param type="function" name="init-val-or-seq"/>

	</params>
	<desc><![CDATA[	Creates an array of floats]]></desc>
</keyword>
<keyword name="doubles" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="xs"/>

	</params>
	<desc><![CDATA[	Casts to double[]]]></desc>
</keyword>
<keyword name="isa?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="child"/>
	<param type="function" name="parent"/>

	</params>
	<desc><![CDATA[	Returns true if (= child parent), or child is directly or indirectly derived from
  parent, either via a Java type inheritance relationship or a
  relationship established via derive. h must be a hierarchy obtained
  from make-hierarchy, if not supplied defaults to the global
  hierarchy]]></desc>
</keyword>
<keyword name="isa?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="h"/>
	<param type="function" name="child"/>
	<param type="function" name="parent"/>

	</params>
	<desc><![CDATA[	Returns true if (= child parent), or child is directly or indirectly derived from
  parent, either via a Java type inheritance relationship or a
  relationship established via derive. h must be a hierarchy obtained
  from make-hierarchy, if not supplied defaults to the global
  hierarchy]]></desc>
</keyword>
<keyword name="future-call" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>

	</params>
	<desc><![CDATA[	Takes a function of no args and yields a future object that will
  invoke the function in another thread, and will cache the result and
  return it on all subsequent calls to deref/@. If the computation has
  not yet finished, calls to deref/@ will block, unless the variant
  of deref with timeout is used. See also - realized?.]]></desc>
</keyword>
<keyword name="doto" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="forms"/>

	</params>
	<desc><![CDATA[	Evaluates x then calls all of the methods and functions with the
  value of x supplied at the front of the given arguments.  The forms
  are evaluated in order.  Returns x.

  (doto (new java.util.HashMap) (.put "a" 1) (.put "b" 2))]]></desc>
</keyword>
<keyword name="extends?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="protocol"/>
	<param type="function" name="atype"/>

	</params>
	<desc><![CDATA[	Returns true if atype extends protocol]]></desc>
</keyword>
<keyword name="remove-watch" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="reference"/>
	<param type="function" name="key"/>

	</params>
	<desc><![CDATA[	Alpha - subject to change.
  Removes a watch (set by add-watch) from a reference]]></desc>
</keyword>
<keyword name="print-str" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="xs"/>

	</params>
	<desc><![CDATA[	print to a string, returning it]]></desc>
</keyword>
<keyword name="ref-history-count" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="ref"/>

	</params>
	<desc><![CDATA[	Returns the history count of a ref]]></desc>
</keyword>
<keyword name="rsubseq" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="sc"/>
	<param type="function" name="test"/>
	<param type="function" name="key"/>

	</params>
	<desc><![CDATA[	sc must be a sorted collection, test(s) one of <, <=, > or
  >=. Returns a reverse seq of those entries with keys ek for
  which (test (.. sc comparator (compare ek key)) 0) is true]]></desc>
</keyword>
<keyword name="rsubseq" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="sc"/>
	<param type="function" name="start-test"/>
	<param type="function" name="start-key"/>
	<param type="function" name="end-test"/>
	<param type="function" name="end-key"/>

	</params>
	<desc><![CDATA[	sc must be a sorted collection, test(s) one of <, <=, > or
  >=. Returns a reverse seq of those entries with keys ek for
  which (test (.. sc comparator (compare ek key)) 0) is true]]></desc>
</keyword>
<keyword name="future?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns true if x is a future]]></desc>
</keyword>
<keyword name="vector?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Return true if x implements IPersistentVector]]></desc>
</keyword>
<keyword name="split-at" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="n"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a vector of [(take n coll) (drop n coll)]]]></desc>
</keyword>
<keyword name="chunk-cons" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="chunk"/>
	<param type="function" name="rest"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="ns-refers" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="ns"/>

	</params>
	<desc><![CDATA[	Returns a map of the refer mappings for the namespace.]]></desc>
</keyword>
<keyword name="create-struct" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="keys"/>

	</params>
	<desc><![CDATA[	Returns a structure basis object.]]></desc>
</keyword>
<keyword name="proxy-super" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="meth"/>
	<param type="function" name="args"/>

	</params>
	<desc><![CDATA[	Use to call a superclass method in the body of a proxy method. 
  Note, expansion captures 'this]]></desc>
</keyword>
<keyword name="int-array" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="size-or-seq"/>

	</params>
	<desc><![CDATA[	Creates an array of ints]]></desc>
</keyword>
<keyword name="int-array" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="size"/>
	<param type="function" name="init-val-or-seq"/>

	</params>
	<desc><![CDATA[	Creates an array of ints]]></desc>
</keyword>
<keyword name="unchecked-long" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Coerce to long. Subject to rounding or truncation.]]></desc>
</keyword>
<keyword name="float" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Coerce to float]]></desc>
</keyword>
<keyword name="assert" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Evaluates expr and throws an exception if it does not evaluate to
  logical true.]]></desc>
</keyword>
<keyword name="assert" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="message"/>

	</params>
	<desc><![CDATA[	Evaluates expr and throws an exception if it does not evaluate to
  logical true.]]></desc>
</keyword>
<keyword name="map" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a lazy sequence consisting of the result of applying f to the
  set of first items of each coll, followed by applying f to the set
  of second items in each coll, until any one of the colls is
  exhausted.  Any remaining items in other colls are ignored. Function
  f should accept number-of-colls arguments.]]></desc>
</keyword>
<keyword name="map" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="c1"/>
	<param type="function" name="c2"/>

	</params>
	<desc><![CDATA[	Returns a lazy sequence consisting of the result of applying f to the
  set of first items of each coll, followed by applying f to the set
  of second items in each coll, until any one of the colls is
  exhausted.  Any remaining items in other colls are ignored. Function
  f should accept number-of-colls arguments.]]></desc>
</keyword>
<keyword name="map" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="c1"/>
	<param type="function" name="c2"/>
	<param type="function" name="c3"/>

	</params>
	<desc><![CDATA[	Returns a lazy sequence consisting of the result of applying f to the
  set of first items of each coll, followed by applying f to the set
  of second items in each coll, until any one of the colls is
  exhausted.  Any remaining items in other colls are ignored. Function
  f should accept number-of-colls arguments.]]></desc>
</keyword>
<keyword name="map" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="c1"/>
	<param type="function" name="c2"/>
	<param type="function" name="c3"/>
	<param type="function" name="colls"/>

	</params>
	<desc><![CDATA[	Returns a lazy sequence consisting of the result of applying f to the
  set of first items of each coll, followed by applying f to the set
  of second items in each coll, until any one of the colls is
  exhausted.  Any remaining items in other colls are ignored. Function
  f should accept number-of-colls arguments.]]></desc>
</keyword>
<keyword name="+'" type="function" returnType=" " definedIn="clojure.core">
	<params>

	</params>
	<desc><![CDATA[	Returns the sum of nums. (+) returns 0. Supports arbitrary precision.
  See also: +]]></desc>
</keyword>
<keyword name="+'" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns the sum of nums. (+) returns 0. Supports arbitrary precision.
  See also: +]]></desc>
</keyword>
<keyword name="+'" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	Returns the sum of nums. (+) returns 0. Supports arbitrary precision.
  See also: +]]></desc>
</keyword>
<keyword name="+'" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>
	<param type="function" name="more"/>

	</params>
	<desc><![CDATA[	Returns the sum of nums. (+) returns 0. Supports arbitrary precision.
  See also: +]]></desc>
</keyword>
<keyword name="counted?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns true if coll implements count in constant time]]></desc>
</keyword>
<keyword name="memfn" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="name"/>
	<param type="function" name="args"/>

	</params>
	<desc><![CDATA[	Expands into code that creates a fn that expects to be passed an
  object and any args and calls the named instance method on the
  object passing the args. Use when you want to treat a Java method as
  a first-class fn.]]></desc>
</keyword>
<keyword name="double-array" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="size-or-seq"/>

	</params>
	<desc><![CDATA[	Creates an array of doubles]]></desc>
</keyword>
<keyword name="double-array" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="size"/>
	<param type="function" name="init-val-or-seq"/>

	</params>
	<desc><![CDATA[	Creates an array of doubles]]></desc>
</keyword>
<keyword name="accessor" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="s"/>
	<param type="function" name="key"/>

	</params>
	<desc><![CDATA[	Returns a fn that, given an instance of a structmap with the basis,
  returns the value at the key.  The key must be in the basis. The
  returned function should be (slightly) more efficient than using
  get, but such use of accessors should be limited to known
  performance-critical areas.]]></desc>
</keyword>
<keyword name="frequencies" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a map from distinct items in coll to the number of times
  they appear.]]></desc>
</keyword>
<keyword name="chars" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="xs"/>

	</params>
	<desc><![CDATA[	Casts to chars[]]]></desc>
</keyword>
<keyword name="class?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns true if x is an instance of Class]]></desc>
</keyword>
<keyword name="rand-int" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="n"/>

	</params>
	<desc><![CDATA[	Returns a random integer between 0 (inclusive) and n (exclusive).]]></desc>
</keyword>
<keyword name="aset-short" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="array"/>
	<param type="function" name="idx"/>
	<param type="function" name="val"/>

	</params>
	<desc><![CDATA[	Sets the value at the index/indices. Works on arrays of short. Returns val.]]></desc>
</keyword>
<keyword name="aset-short" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="array"/>
	<param type="function" name="idx"/>
	<param type="function" name="idx2"/>
	<param type="function" name="idxv"/>

	</params>
	<desc><![CDATA[	Sets the value at the index/indices. Works on arrays of short. Returns val.]]></desc>
</keyword>
<keyword name="unchecked-short" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Coerce to short. Subject to rounding or truncation.]]></desc>
</keyword>
<keyword name="prn-str" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="xs"/>

	</params>
	<desc><![CDATA[	prn to a string, returning it]]></desc>
</keyword>
<keyword name="iterate" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects]]></desc>
</keyword>
<keyword name="chunk-append" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="b"/>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="when-first" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="bindings"/>
	<param type="function" name="body"/>

	</params>
	<desc><![CDATA[	bindings => x xs

  Same as (when (seq xs) (let [x (first xs)] body))]]></desc>
</keyword>
<keyword name="unchecked-double" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Coerce to double. Subject to rounding.]]></desc>
</keyword>
<keyword name="slurp" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="opts"/>

	</params>
	<desc><![CDATA[	Opens a reader on f and reads all its contents, returning a string.
  See clojure.java.io/reader for a complete list of supported arguments.]]></desc>
</keyword>
<keyword name="restart-agent" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="a"/>
	<param type="function" name="new-state"/>
	<param type="function" name="options"/>

	</params>
	<desc><![CDATA[	When an agent is failed, changes the agent state to new-state and
  then un-fails the agent so that sends are allowed again.  If
  a :clear-actions true option is given, any actions queued on the
  agent that were being held while it was failed will be discarded,
  otherwise those held actions will proceed.  The new-state must pass
  the validator if any, or restart will throw an exception and the
  agent will remain failed with its old state and error.  Watchers, if
  any, will NOT be notified of the new state.  Throws an exception if
  the agent is not failed.]]></desc>
</keyword>
<keyword name="unchecked-int" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Coerce to int. Subject to rounding or truncation.]]></desc>
</keyword>
<keyword name="mapcat" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="colls"/>

	</params>
	<desc><![CDATA[	Returns the result of applying concat to the result of applying map
  to f and colls.  Thus function f should return a collection.]]></desc>
</keyword>
<keyword name="assoc-in" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="m"/>
	<param type="function" name="[k &amp;ks]"/>
	<param type="function" name="v"/>

	</params>
	<desc><![CDATA[	Associates a value in a nested associative structure, where ks is a
  sequence of keys and v is the new value and returns a new nested structure.
  If any levels do not exist, hash-maps will be created.]]></desc>
</keyword>
<keyword name="get-thread-bindings" type="function" returnType=" " definedIn="clojure.core">
	<params>

	</params>
	<desc><![CDATA[	Get a map with the Var/value pairs which is currently in effect for the
  current thread.]]></desc>
</keyword>
<keyword name="special-symbol?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="s"/>

	</params>
	<desc><![CDATA[	Returns true if s names a special form]]></desc>
</keyword>
<keyword name="ref" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Creates and returns a Ref with an initial value of x and zero or
  more options (in any order):

  :meta metadata-map

  :validator validate-fn

  :min-history (default 0)
  :max-history (default 10)

  If metadata-map is supplied, it will be come the metadata on the
  ref. validate-fn must be nil or a side-effect-free fn of one
  argument, which will be passed the intended new state on any state
  change. If the new state is unacceptable, the validate-fn should
  return false or throw an exception. validate-fn will be called on
  transaction commit, when all refs have their final values.

  Normally refs accumulate history dynamically as needed to deal with
  read demands. If you know in advance you will need history you can
  set :min-history to ensure it will be available when first needed (instead
  of after a read fault). History is limited, and the limit can be set
  with :max-history.]]></desc>
</keyword>
<keyword name="ref" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="options"/>

	</params>
	<desc><![CDATA[	Creates and returns a Ref with an initial value of x and zero or
  more options (in any order):

  :meta metadata-map

  :validator validate-fn

  :min-history (default 0)
  :max-history (default 10)

  If metadata-map is supplied, it will be come the metadata on the
  ref. validate-fn must be nil or a side-effect-free fn of one
  argument, which will be passed the intended new state on any state
  change. If the new state is unacceptable, the validate-fn should
  return false or throw an exception. validate-fn will be called on
  transaction commit, when all refs have their final values.

  Normally refs accumulate history dynamically as needed to deal with
  read demands. If you know in advance you will need history you can
  set :min-history to ensure it will be available when first needed (instead
  of after a read fault). History is limited, and the limit can be set
  with :max-history.]]></desc>
</keyword>
<keyword name="conj!" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Alpha - subject to change.
  Adds x to the transient collection, and return coll. The 'addition'
  may happen at different 'places' depending on the concrete type.]]></desc>
</keyword>
<keyword name="find-var" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="sym"/>

	</params>
	<desc><![CDATA[	Returns the global var named by the namespace-qualified symbol, or
  nil if no var with that name.]]></desc>
</keyword>
<keyword name="inc" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns a number one greater than num. Does not auto-promote
  longs, will throw on overflow. See also: inc']]></desc>
</keyword>
<keyword name="future-cancel" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>

	</params>
	<desc><![CDATA[	Cancels the future, if possible.]]></desc>
</keyword>
<keyword name="every-pred" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="p"/>

	</params>
	<desc><![CDATA[	Takes a set of predicates and returns a function f that returns true if all of its
  composing predicates return a logical true value against all of its arguments, else it returns
  false. Note that f is short-circuiting in that it will stop execution on the first
  argument that triggers a logical false result against the original predicates.]]></desc>
</keyword>
<keyword name="every-pred" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="p1"/>
	<param type="function" name="p2"/>

	</params>
	<desc><![CDATA[	Takes a set of predicates and returns a function f that returns true if all of its
  composing predicates return a logical true value against all of its arguments, else it returns
  false. Note that f is short-circuiting in that it will stop execution on the first
  argument that triggers a logical false result against the original predicates.]]></desc>
</keyword>
<keyword name="every-pred" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="p1"/>
	<param type="function" name="p2"/>
	<param type="function" name="p3"/>

	</params>
	<desc><![CDATA[	Takes a set of predicates and returns a function f that returns true if all of its
  composing predicates return a logical true value against all of its arguments, else it returns
  false. Note that f is short-circuiting in that it will stop execution on the first
  argument that triggers a logical false result against the original predicates.]]></desc>
</keyword>
<keyword name="every-pred" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="p1"/>
	<param type="function" name="p2"/>
	<param type="function" name="p3"/>
	<param type="function" name="ps"/>

	</params>
	<desc><![CDATA[	Takes a set of predicates and returns a function f that returns true if all of its
  composing predicates return a logical true value against all of its arguments, else it returns
  false. Note that f is short-circuiting in that it will stop execution on the first
  argument that triggers a logical false result against the original predicates.]]></desc>
</keyword>
<keyword name="definline" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="name"/>
	<param type="function" name="decl"/>

	</params>
	<desc><![CDATA[	Experimental - like defmacro, except defines a named function whose
  body is the expansion, calls to which may be expanded inline as if
  it were a macro. Cannot be used with variadic (&amp;) args.]]></desc>
</keyword>
<keyword name="bound-fn*" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>

	</params>
	<desc><![CDATA[	Returns a function, which will install the same bindings in effect as in
  the thread at the time bound-fn* was called and then call f with any given
  arguments. This may be used to define a helper function which runs on a
  different thread, but needs the same bindings in place.]]></desc>
</keyword>
<keyword name="unchecked-subtract" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	Returns the difference of x and y, both long.
  Note - uses a primitive operator subject to overflow.]]></desc>
</keyword>
<keyword name="ns-name" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="ns"/>

	</params>
	<desc><![CDATA[	Returns the name of the namespace, a symbol.]]></desc>
</keyword>
<keyword name="shuffle" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Return a random permutation of coll]]></desc>
</keyword>
<keyword name="defn-" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="name"/>
	<param type="function" name="decls"/>

	</params>
	<desc><![CDATA[	same as defn, yielding non-public def]]></desc>
</keyword>
<keyword name="re-find" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="m"/>

	</params>
	<desc><![CDATA[	Returns the next regex match, if any, of string to pattern, using
  java.util.regex.Matcher.find().  Uses re-groups to return the
  groups.]]></desc>
</keyword>
<keyword name="re-find" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="re"/>
	<param type="function" name="s"/>

	</params>
	<desc><![CDATA[	Returns the next regex match, if any, of string to pattern, using
  java.util.regex.Matcher.find().  Uses re-groups to return the
  groups.]]></desc>
</keyword>
<keyword name="bit-not" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Bitwise complement]]></desc>
</keyword>
<keyword name="construct-proxy" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="c"/>
	<param type="function" name="ctor-args"/>

	</params>
	<desc><![CDATA[	Takes a proxy class and any arguments for its superclass ctor and
  creates and returns an instance of the proxy.]]></desc>
</keyword>
<keyword name="ref-min-history" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="ref"/>

	</params>
	<desc><![CDATA[	Gets the min-history of a ref, or sets it and returns the ref]]></desc>
</keyword>
<keyword name="ref-min-history" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="ref"/>
	<param type="function" name="n"/>

	</params>
	<desc><![CDATA[	Gets the min-history of a ref, or sets it and returns the ref]]></desc>
</keyword>
<keyword name="destructure" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="bindings"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="seq" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a seq on the collection. If the collection is
    empty, returns nil.  (seq nil) returns nil. seq also works on
    Strings, native Java arrays (of reference types) and any objects
    that implement Iterable.]]></desc>
</keyword>
<keyword name="intern" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="ns"/>
	<param type="function" name="name"/>

	</params>
	<desc><![CDATA[	Finds or creates a var named by the symbol name in the namespace
  ns (which can be a symbol or a namespace), setting its root binding
  to val if supplied. The namespace must exist. The var will adopt any
  metadata from the name symbol.  Returns the var.]]></desc>
</keyword>
<keyword name="intern" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="ns"/>
	<param type="function" name="name"/>
	<param type="function" name="val"/>

	</params>
	<desc><![CDATA[	Finds or creates a var named by the symbol name in the namespace
  ns (which can be a symbol or a namespace), setting its root binding
  to val if supplied. The namespace must exist. The var will adopt any
  metadata from the name symbol.  Returns the var.]]></desc>
</keyword>
<keyword name="unchecked-multiply-int" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	Returns the product of x and y, both int.
  Note - uses a primitive operator subject to overflow.]]></desc>
</keyword>
<keyword name="pvalues" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="exprs"/>

	</params>
	<desc><![CDATA[	Returns a lazy sequence of the values of the exprs, which are
  evaluated in parallel]]></desc>
</keyword>
<keyword name="to-array-2d" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a (potentially-ragged) 2-dimensional array of Objects
  containing the contents of coll, which can be any Collection of any
  Collection.]]></desc>
</keyword>
<keyword name="sorted-map-by" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="comparator"/>
	<param type="function" name="keyvals"/>

	</params>
	<desc><![CDATA[	keyval => key val
  Returns a new sorted map with supplied mappings, using the supplied comparator.]]></desc>
</keyword>
<keyword name="filter" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="pred"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a lazy sequence of the items in coll for which
  (pred item) returns true. pred must be free of side-effects.]]></desc>
</keyword>
<keyword name="->VecNode" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="edit"/>
	<param type="function" name="arr"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="var?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="v"/>

	</params>
	<desc><![CDATA[	Returns true if v is of type clojure.lang.Var]]></desc>
</keyword>
<keyword name="alter-meta!" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="iref"/>
	<param type="function" name="f"/>
	<param type="function" name="args"/>

	</params>
	<desc><![CDATA[	Atomically sets the metadata for a namespace/var/ref/agent/atom to be:

  (apply f its-current-meta args)

  f must be free of side-effects]]></desc>
</keyword>
<keyword name="unchecked-dec-int" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns a number one less than x, an int.
  Note - uses a primitive operator subject to overflow.]]></desc>
</keyword>
<keyword name="comment" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="body"/>

	</params>
	<desc><![CDATA[	Ignores body, yields nil]]></desc>
</keyword>
<keyword name="key" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="e"/>

	</params>
	<desc><![CDATA[	Returns the key of the map entry.]]></desc>
</keyword>
<keyword name="class" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns the Class of x]]></desc>
</keyword>
<keyword name="re-seq" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="re"/>
	<param type="function" name="s"/>

	</params>
	<desc><![CDATA[	Returns a lazy sequence of successive matches of pattern in string,
  using java.util.regex.Matcher.find(), each such match processed with
  re-groups.]]></desc>
</keyword>
<keyword name="-cache-protocol-fn" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="pf"/>
	<param type="function" name="x"/>
	<param type="function" name="c"/>
	<param type="function" name="interf"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="ns" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="name"/>
	<param type="function" name="docstring?"/>
	<param type="function" name="attr-map?"/>
	<param type="function" name="references*"/>

	</params>
	<desc><![CDATA[	Sets *ns* to the namespace named by name (unevaluated), creating it
  if needed.  references can be zero or more of: (:refer-clojure ...)
  (:require ...) (:use ...) (:import ...) (:load ...) (:gen-class)
  with the syntax of refer-clojure/require/use/import/load/gen-class
  respectively, except the arguments are unevaluated and need not be
  quoted. (:gen-class ...), when supplied, defaults to :name
  corresponding to the ns name, :main true, :impl-ns same as ns, and
  :init-impl-ns true. All options of gen-class are
  supported. The :gen-class directive is ignored when not
  compiling. If :gen-class is not supplied, when compiled only an
  nsname__init.class will be generated. If :refer-clojure is not used, a
  default (refer 'clojure) is used.  Use of ns is preferred to
  individual calls to in-ns/require/use/import:

  (ns foo.bar
    (:refer-clojure :exclude [ancestors printf])
    (:require (clojure.contrib sql sql.tests))
    (:use (my.lib this that))
    (:import (java.util Date Timer Random)
             (java.sql Connection Statement)))]]></desc>
</keyword>
<keyword name="empty?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns true if coll has no items - same as (not (seq coll)).
  Please use the idiom (seq x) rather than (not (empty? x))]]></desc>
</keyword>
<keyword name="test" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="v"/>

	</params>
	<desc><![CDATA[	test [v] finds fn at key :test in var metadata and calls it,
  presuming failure will throw exception]]></desc>
</keyword>
<keyword name="create-ns" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="sym"/>

	</params>
	<desc><![CDATA[	Create a new namespace named by the symbol if one doesn't already
  exist, returns it or the already-existing namespace of the same
  name.]]></desc>
</keyword>
<keyword name="name" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns the name String of a string, symbol or keyword.]]></desc>
</keyword>
<keyword name="list?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns true if x implements IPersistentList]]></desc>
</keyword>
<keyword name="nthrest" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>
	<param type="function" name="n"/>

	</params>
	<desc><![CDATA[	Returns the nth rest of coll, coll when n is 0.]]></desc>
</keyword>
<keyword name="aset" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="array"/>
	<param type="function" name="idx"/>
	<param type="function" name="val"/>

	</params>
	<desc><![CDATA[	Sets the value at the index/indices. Works on Java arrays of
  reference types. Returns val.]]></desc>
</keyword>
<keyword name="aset" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="array"/>
	<param type="function" name="idx"/>
	<param type="function" name="idx2"/>
	<param type="function" name="idxv"/>

	</params>
	<desc><![CDATA[	Sets the value at the index/indices. Works on Java arrays of
  reference types. Returns val.]]></desc>
</keyword>
<keyword name="nnext" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Same as (next (next x))]]></desc>
</keyword>
<keyword name="doall" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	When lazy sequences are produced via functions that have side
  effects, any effects other than those needed to produce the first
  element in the seq do not occur until the seq is consumed. doall can
  be used to force any effects. Walks through the successive nexts of
  the seq, retains the head and returns it, thus causing the entire
  seq to reside in memory at one time.]]></desc>
</keyword>
<keyword name="doall" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="n"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	When lazy sequences are produced via functions that have side
  effects, any effects other than those needed to produce the first
  element in the seq do not occur until the seq is consumed. doall can
  be used to force any effects. Walks through the successive nexts of
  the seq, retains the head and returns it, thus causing the entire
  seq to reside in memory at one time.]]></desc>
</keyword>
<keyword name="extenders" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="protocol"/>

	</params>
	<desc><![CDATA[	Returns a collection of the types explicitly extending protocol]]></desc>
</keyword>
<keyword name="macroexpand-1" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="form"/>

	</params>
	<desc><![CDATA[	If form represents a macro form, returns its expansion,
  else returns form.]]></desc>
</keyword>
<keyword name="not-any?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="pred"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns false if (pred x) is logical true for any x in coll,
  else true.]]></desc>
</keyword>
<keyword name="resultset-seq" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="rs"/>

	</params>
	<desc><![CDATA[	Creates and returns a lazy sequence of structmaps corresponding to
  the rows in the java.sql.ResultSet rs]]></desc>
</keyword>
<keyword name="reductions" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a lazy seq of the intermediate values of the reduction (as
  per reduce) of coll by f, starting with init.]]></desc>
</keyword>
<keyword name="reductions" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="init"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a lazy seq of the intermediate values of the reduction (as
  per reduce) of coll by f, starting with init.]]></desc>
</keyword>
<keyword name="into" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="to"/>
	<param type="function" name="from"/>

	</params>
	<desc><![CDATA[	Returns a new coll consisting of to-coll with all of the items of
  from-coll conjoined.]]></desc>
</keyword>
<keyword name="with-precision" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="precision"/>
	<param type="function" name="exprs"/>

	</params>
	<desc><![CDATA[	Sets the precision and rounding mode to be used for BigDecimal operations.

  Usage: (with-precision 10 (/ 1M 3))
  or:    (with-precision 10 :rounding HALF_DOWN (/ 1M 3))

  The rounding mode is one of CEILING, FLOOR, HALF_UP, HALF_DOWN,
  HALF_EVEN, UP, DOWN and UNNECESSARY; it defaults to HALF_UP.]]></desc>
</keyword>
<keyword name="transient" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Alpha - subject to change.
  Returns a new, transient version of the collection, in constant time.]]></desc>
</keyword>
<keyword name="ffirst" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Same as (first (first x))]]></desc>
</keyword>
<keyword name="bit-clear" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="n"/>

	</params>
	<desc><![CDATA[	Clear bit at index n]]></desc>
</keyword>
<keyword name="proxy-name" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="super"/>
	<param type="function" name="interfaces"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="extend-type" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="t"/>
	<param type="function" name="specs"/>

	</params>
	<desc><![CDATA[	A macro that expands into an extend call. Useful when you are
  supplying the definitions explicitly inline, extend-type
  automatically creates the maps required by extend.  Propagates the
  class as a type hint on the first argument of all fns.

  (extend-type MyType 
    Countable
      (cnt [c] ...)
    Foo
      (bar [x y] ...)
      (baz ([x] ...) ([x y &amp;zs] ...)))

  expands into:

  (extend MyType
   Countable
     {:cnt (fn [c] ...)}
   Foo
     {:baz (fn ([x] ...) ([x y &amp;zs] ...))
      :bar (fn [x y] ...)})]]></desc>
</keyword>
<keyword name="load-reader" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="rdr"/>

	</params>
	<desc><![CDATA[	Sequentially read and evaluate the set of forms contained in the
  stream/file]]></desc>
</keyword>
<keyword name="with-redefs-fn" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="binding-map"/>
	<param type="function" name="func"/>

	</params>
	<desc><![CDATA[	Temporarily redefines Vars during a call to func.  Each val of
  binding-map will replace the root value of its key which must be
  a Var.  After func is called with no args, the root values of all
  the Vars will be set back to their old values.  These temporary
  changes will be visible in all threads.  Useful for mocking out
  functions during testing.]]></desc>
</keyword>
<keyword name="or" type="function" returnType=" " definedIn="clojure.core">
	<params>

	</params>
	<desc><![CDATA[	Evaluates exprs one at a time, from left to right. If a form
  returns a logical true value, or returns that value and doesn't
  evaluate any of the other expressions, otherwise it returns the
  value of the last expression. (or) returns nil.]]></desc>
</keyword>
<keyword name="or" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Evaluates exprs one at a time, from left to right. If a form
  returns a logical true value, or returns that value and doesn't
  evaluate any of the other expressions, otherwise it returns the
  value of the last expression. (or) returns nil.]]></desc>
</keyword>
<keyword name="or" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="next"/>

	</params>
	<desc><![CDATA[	Evaluates exprs one at a time, from left to right. If a form
  returns a logical true value, or returns that value and doesn't
  evaluate any of the other expressions, otherwise it returns the
  value of the last expression. (or) returns nil.]]></desc>
</keyword>
<keyword name="hash" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns the hash code of its argument]]></desc>
</keyword>
<keyword name="inc'" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns a number one greater than num. Supports arbitrary precision.
  See also: inc]]></desc>
</keyword>
<keyword name="print-ctor" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="o"/>
	<param type="function" name="print-args"/>
	<param type="function" name="w"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="associative?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns true if coll implements Associative]]></desc>
</keyword>
<keyword name="float?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="n"/>

	</params>
	<desc><![CDATA[	Returns true if n is a floating point number]]></desc>
</keyword>
<keyword name="drop-last" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="s"/>

	</params>
	<desc><![CDATA[	Return a lazy sequence of all but the last n (default 1) items in coll]]></desc>
</keyword>
<keyword name="drop-last" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="n"/>
	<param type="function" name="s"/>

	</params>
	<desc><![CDATA[	Return a lazy sequence of all but the last n (default 1) items in coll]]></desc>
</keyword>
<keyword name="replace" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="smap"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Given a map of replacement pairs and a vector/collection, returns a
  vector/seq with any elements = a key in smap replaced with the
  corresponding val in smap]]></desc>
</keyword>
<keyword name="decimal?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="n"/>

	</params>
	<desc><![CDATA[	Returns true if n is a BigDecimal]]></desc>
</keyword>
<keyword name="defn" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="name"/>
	<param type="function" name="doc-string?"/>
	<param type="function" name="attr-map?"/>
	<param type="function" name="[params*]"/>
	<param type="function" name="body"/>

	</params>
	<desc><![CDATA[	Same as (def name (fn [params* ] exprs*)) or (def
    name (fn ([params* ] exprs*)+)) with any doc-string or attrs added
    to the var metadata]]></desc>
</keyword>
<keyword name="defn" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="name"/>
	<param type="function" name="doc-string?"/>
	<param type="function" name="attr-map?"/>
	<param type="function" name="([params*] body)"/>
	<param type="function" name="+"/>
	<param type="function" name="attr-map?"/>

	</params>
	<desc><![CDATA[	Same as (def name (fn [params* ] exprs*)) or (def
    name (fn ([params* ] exprs*)+)) with any doc-string or attrs added
    to the var metadata]]></desc>
</keyword>
<keyword name="parents" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="tag"/>

	</params>
	<desc><![CDATA[	Returns the immediate parents of tag, either via a Java type
  inheritance relationship or a relationship established via derive. h
  must be a hierarchy obtained from make-hierarchy, if not supplied
  defaults to the global hierarchy]]></desc>
</keyword>
<keyword name="parents" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="h"/>
	<param type="function" name="tag"/>

	</params>
	<desc><![CDATA[	Returns the immediate parents of tag, either via a Java type
  inheritance relationship or a relationship established via derive. h
  must be a hierarchy obtained from make-hierarchy, if not supplied
  defaults to the global hierarchy]]></desc>
</keyword>
<keyword name="map?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Return true if x implements IPersistentMap]]></desc>
</keyword>
<keyword name="prefers" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="multifn"/>

	</params>
	<desc><![CDATA[	Given a multimethod, returns a map of preferred value -> set of other values]]></desc>
</keyword>
<keyword name="numerator" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="r"/>

	</params>
	<desc><![CDATA[	Returns the numerator part of a Ratio.]]></desc>
</keyword>
<keyword name="condp" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="pred"/>
	<param type="function" name="expr"/>
	<param type="function" name="clauses"/>

	</params>
	<desc><![CDATA[	Takes a binary predicate, an expression, and a set of clauses.
  Each clause can take the form of either:

  test-expr result-expr

  test-expr :>> result-fn

  Note :>> is an ordinary keyword.

  For each clause, (pred test-expr expr) is evaluated. If it returns
  logical true, the clause is a match. If a binary clause matches, the
  result-expr is returned, if a ternary clause matches, its result-fn,
  which must be a unary function, is called with the result of the
  predicate as its argument, the result of that call being the return
  value of condp. A single default expression can follow the clauses,
  and its value will be returned if no clause matches. If no default
  expression is provided and no clause matches, an
  IllegalArgumentException is thrown.]]></desc>
</keyword>
<keyword name="quot" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="num"/>
	<param type="function" name="div"/>

	</params>
	<desc><![CDATA[	quot[ient] of dividing numerator by denominator.]]></desc>
</keyword>
<keyword name="chunk-rest" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="s"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="unchecked-negate-int" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns the negation of x, an int.
  Note - uses a primitive operator subject to overflow.]]></desc>
</keyword>
<keyword name="file-seq" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="dir"/>

	</params>
	<desc><![CDATA[	A tree seq on java.io.Files]]></desc>
</keyword>
<keyword name="send" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="a"/>
	<param type="function" name="f"/>
	<param type="function" name="args"/>

	</params>
	<desc><![CDATA[	Dispatch an action to an agent. Returns the agent immediately.
  Subsequently, in a thread from a thread pool, the state of the agent
  will be set to the value of:

  (apply action-fn state-of-agent args)]]></desc>
</keyword>
<keyword name="with-local-vars" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="name-vals-vec"/>
	<param type="function" name="body"/>

	</params>
	<desc><![CDATA[	varbinding=> symbol init-expr

  Executes the exprs in a context in which the symbols are bound to
  vars with per-thread bindings to the init-exprs.  The symbols refer
  to the var objects themselves, and must be accessed with var-get and
  var-set]]></desc>
</keyword>
<keyword name="reverse" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a seq of the items in coll in reverse order. Not lazy.]]></desc>
</keyword>
<keyword name="with-bindings" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="binding-map"/>
	<param type="function" name="body"/>

	</params>
	<desc><![CDATA[	Takes a map of Var/value pairs. Installs for the given Vars the associated
  values as thread-local bindings. The executes body. Pops the installed
  bindings after body was evaluated. Returns the value of body.]]></desc>
</keyword>
<keyword name="count" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns the number of items in the collection. (count nil) returns
  0.  Also works on strings, arrays, and Java Collections and Maps]]></desc>
</keyword>
<keyword name="get-proxy-class" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="bases"/>

	</params>
	<desc><![CDATA[	Takes an optional single class followed by zero or more
  interfaces. If not supplied class defaults to Object.  Creates an
  returns an instance of a proxy class derived from the supplied
  classes. The resulting value is cached and used for any subsequent
  requests for the same class set. Returns a Class object.]]></desc>
</keyword>
<keyword name="set" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a set of the distinct elements of coll.]]></desc>
</keyword>
<keyword name="unchecked-subtract-int" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	Returns the difference of x and y, both int.
  Note - uses a primitive operator subject to overflow.]]></desc>
</keyword>
<keyword name="when-let" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="bindings"/>
	<param type="function" name="body"/>

	</params>
	<desc><![CDATA[	bindings => binding-form test

  When test is true, evaluates body with binding-form bound to the value of test]]></desc>
</keyword>
<keyword name="comp" type="function" returnType=" " definedIn="clojure.core">
	<params>

	</params>
	<desc><![CDATA[	Takes a set of functions and returns a fn that is the composition
  of those fns.  The returned fn takes a variable number of args,
  applies the rightmost of fns to the args, the next
  fn (right-to-left) to the result, etc.]]></desc>
</keyword>
<keyword name="comp" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>

	</params>
	<desc><![CDATA[	Takes a set of functions and returns a fn that is the composition
  of those fns.  The returned fn takes a variable number of args,
  applies the rightmost of fns to the args, the next
  fn (right-to-left) to the result, etc.]]></desc>
</keyword>
<keyword name="comp" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="g"/>

	</params>
	<desc><![CDATA[	Takes a set of functions and returns a fn that is the composition
  of those fns.  The returned fn takes a variable number of args,
  applies the rightmost of fns to the args, the next
  fn (right-to-left) to the result, etc.]]></desc>
</keyword>
<keyword name="comp" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="g"/>
	<param type="function" name="h"/>

	</params>
	<desc><![CDATA[	Takes a set of functions and returns a fn that is the composition
  of those fns.  The returned fn takes a variable number of args,
  applies the rightmost of fns to the args, the next
  fn (right-to-left) to the result, etc.]]></desc>
</keyword>
<keyword name="comp" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f1"/>
	<param type="function" name="f2"/>
	<param type="function" name="f3"/>
	<param type="function" name="fs"/>

	</params>
	<desc><![CDATA[	Takes a set of functions and returns a fn that is the composition
  of those fns.  The returned fn takes a variable number of args,
  applies the rightmost of fns to the args, the next
  fn (right-to-left) to the result, etc.]]></desc>
</keyword>
<keyword name="nth" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>
	<param type="function" name="index"/>

	</params>
	<desc><![CDATA[	Returns the value at the index. get returns nil if index out of
  bounds, nth throws an exception unless not-found is supplied.  nth
  also works for strings, Java arrays, regex Matchers and Lists, and,
  in O(n) time, for sequences.]]></desc>
</keyword>
<keyword name="nth" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>
	<param type="function" name="index"/>
	<param type="function" name="not-found"/>

	</params>
	<desc><![CDATA[	Returns the value at the index. get returns nil if index out of
  bounds, nth throws an exception unless not-found is supplied.  nth
  also works for strings, Java arrays, regex Matchers and Lists, and,
  in O(n) time, for sequences.]]></desc>
</keyword>
<keyword name="byte" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Coerce to byte]]></desc>
</keyword>
<keyword name="dissoc!" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="map"/>
	<param type="function" name="key"/>

	</params>
	<desc><![CDATA[	Alpha - subject to change.
  Returns a transient map that doesn't contain a mapping for key(s).]]></desc>
</keyword>
<keyword name="dissoc!" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="map"/>
	<param type="function" name="key"/>
	<param type="function" name="ks"/>

	</params>
	<desc><![CDATA[	Alpha - subject to change.
  Returns a transient map that doesn't contain a mapping for key(s).]]></desc>
</keyword>
<keyword name="constantly" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns a function that takes any number of arguments and returns x.]]></desc>
</keyword>
<keyword name="load" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="paths"/>

	</params>
	<desc><![CDATA[	Loads Clojure code from resources in classpath. A path is interpreted as
  classpath-relative if it begins with a slash or relative to the root
  directory for the current namespace otherwise.]]></desc>
</keyword>
<keyword name="namespace" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns the namespace String of a symbol or keyword, or nil if not present.]]></desc>
</keyword>
<keyword name="pr-str" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="xs"/>

	</params>
	<desc><![CDATA[	pr to a string, returning it]]></desc>
</keyword>
<keyword name="rationalize" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="num"/>

	</params>
	<desc><![CDATA[	returns the rational value of num]]></desc>
</keyword>
<keyword name="sort-by" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="keyfn"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a sorted sequence of the items in coll, where the sort
  order is determined by comparing (keyfn item).  If no comparator is
  supplied, uses compare. comparator must
  implement java.util.Comparator.]]></desc>
</keyword>
<keyword name="sort-by" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="keyfn"/>
	<param type="function" name="comp"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a sorted sequence of the items in coll, where the sort
  order is determined by comparing (keyfn item).  If no comparator is
  supplied, uses compare. comparator must
  implement java.util.Comparator.]]></desc>
</keyword>
<keyword name="->VecSeq" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="am"/>
	<param type="function" name="vec"/>
	<param type="function" name="anode"/>
	<param type="function" name="i"/>
	<param type="function" name="offset"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="cycle" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a lazy (infinite!) sequence of repetitions of the items in coll.]]></desc>
</keyword>
<keyword name="peek" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	For a list or queue, same as first, for a vector, same as, but much
  more efficient than, last. If the collection is empty, returns nil.]]></desc>
</keyword>
<keyword name="denominator" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="r"/>

	</params>
	<desc><![CDATA[	Returns the denominator part of a Ratio.]]></desc>
</keyword>
<keyword name="reduce" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	f should be a function of 2 arguments. If val is not supplied,
  returns the result of applying f to the first 2 items in coll, then
  applying f to that result and the 3rd item, etc. If coll contains no
  items, f must accept no arguments as well, and reduce returns the
  result of calling f with no arguments.  If coll has only 1 item, it
  is returned and f is not called.  If val is supplied, returns the
  result of applying f to val and the first item in coll, then
  applying f to that result and the 2nd item, etc. If coll contains no
  items, returns val and f is not called.]]></desc>
</keyword>
<keyword name="reduce" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="val"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	f should be a function of 2 arguments. If val is not supplied,
  returns the result of applying f to the first 2 items in coll, then
  applying f to that result and the 3rd item, etc. If coll contains no
  items, f must accept no arguments as well, and reduce returns the
  result of calling f with no arguments.  If coll has only 1 item, it
  is returned and f is not called.  If val is supplied, returns the
  result of applying f to val and the first item in coll, then
  applying f to that result and the 2nd item, etc. If coll contains no
  items, returns val and f is not called.]]></desc>
</keyword>
<keyword name="interleave" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="c1"/>
	<param type="function" name="c2"/>

	</params>
	<desc><![CDATA[	Returns a lazy seq of the first item in each coll, then the second etc.]]></desc>
</keyword>
<keyword name="interleave" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="c1"/>
	<param type="function" name="c2"/>
	<param type="function" name="colls"/>

	</params>
	<desc><![CDATA[	Returns a lazy seq of the first item in each coll, then the second etc.]]></desc>
</keyword>
<keyword name="amap" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="a"/>
	<param type="function" name="idx"/>
	<param type="function" name="ret"/>
	<param type="function" name="expr"/>

	</params>
	<desc><![CDATA[	Maps an expression across an array a, using an index named idx, and
  return value named ret, initialized to a clone of a, then setting 
  each element of ret to the evaluation of expr, returning the new 
  array ret.]]></desc>
</keyword>
<keyword name="->" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Threads the expr through the forms. Inserts x as the
  second item in the first form, making a list of it if it is not a
  list already. If there are more forms, inserts the first form as the
  second item in second form, etc.]]></desc>
</keyword>
<keyword name="->" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="form"/>

	</params>
	<desc><![CDATA[	Threads the expr through the forms. Inserts x as the
  second item in the first form, making a list of it if it is not a
  list already. If there are more forms, inserts the first form as the
  second item in second form, etc.]]></desc>
</keyword>
<keyword name="->" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="form"/>
	<param type="function" name="more"/>

	</params>
	<desc><![CDATA[	Threads the expr through the forms. Inserts x as the
  second item in the first form, making a list of it if it is not a
  list already. If there are more forms, inserts the first form as the
  second item in second form, etc.]]></desc>
</keyword>
<keyword name="cons" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="seq"/>

	</params>
	<desc><![CDATA[	Returns a new seq where x is the first element and seq is
    the rest.]]></desc>
</keyword>
<keyword name="macroexpand" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="form"/>

	</params>
	<desc><![CDATA[	Repeatedly calls macroexpand-1 on form until it no longer
  represents a macro form, then returns it.  Note neither
  macroexpand-1 nor macroexpand expand macros in subforms.]]></desc>
</keyword>
<keyword name="var-set" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="val"/>

	</params>
	<desc><![CDATA[	Sets the value in the var object to val. The var must be
 thread-locally bound.]]></desc>
</keyword>
<keyword name="str" type="function" returnType=" " definedIn="clojure.core">
	<params>

	</params>
	<desc><![CDATA[	With no args, returns the empty string. With one arg x, returns
  x.toString().  (str nil) returns the empty string. With more than
  one arg, returns the concatenation of the str values of the args.]]></desc>
</keyword>
<keyword name="str" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	With no args, returns the empty string. With one arg x, returns
  x.toString().  (str nil) returns the empty string. With more than
  one arg, returns the concatenation of the str values of the args.]]></desc>
</keyword>
<keyword name="str" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="ys"/>

	</params>
	<desc><![CDATA[	With no args, returns the empty string. With one arg x, returns
  x.toString().  (str nil) returns the empty string. With more than
  one arg, returns the concatenation of the str values of the args.]]></desc>
</keyword>
<keyword name="aset-boolean" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="array"/>
	<param type="function" name="idx"/>
	<param type="function" name="val"/>

	</params>
	<desc><![CDATA[	Sets the value at the index/indices. Works on arrays of boolean. Returns val.]]></desc>
</keyword>
<keyword name="aset-boolean" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="array"/>
	<param type="function" name="idx"/>
	<param type="function" name="idx2"/>
	<param type="function" name="idxv"/>

	</params>
	<desc><![CDATA[	Sets the value at the index/indices. Works on arrays of boolean. Returns val.]]></desc>
</keyword>
<keyword name="ns-imports" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="ns"/>

	</params>
	<desc><![CDATA[	Returns a map of the import mappings for the namespace.]]></desc>
</keyword>
<keyword name="while" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="test"/>
	<param type="function" name="body"/>

	</params>
	<desc><![CDATA[	Repeatedly executes body while test expression is true. Presumes
  some side-effect will cause test to become false/nil. Returns nil]]></desc>
</keyword>
<keyword name="remove-all-methods" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="multifn"/>

	</params>
	<desc><![CDATA[	Removes all of the methods of multimethod.]]></desc>
</keyword>
<keyword name="first" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns the first item in the collection. Calls seq on its
    argument. If coll is nil, returns nil.]]></desc>
</keyword>
<keyword name="bean" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Takes a Java object and returns a read-only implementation of the
  map abstraction based upon its JavaBean properties.]]></desc>
</keyword>
<keyword name="=" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Equality. Returns true if x equals y, false if not. Same as
  Java x.equals(y) except it also works for nil, and compares
  numbers and collections in a type-independent manner.  Clojure's immutable data
  structures define equals() (and thus =) as a value, not an identity,
  comparison.]]></desc>
</keyword>
<keyword name="=" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	Equality. Returns true if x equals y, false if not. Same as
  Java x.equals(y) except it also works for nil, and compares
  numbers and collections in a type-independent manner.  Clojure's immutable data
  structures define equals() (and thus =) as a value, not an identity,
  comparison.]]></desc>
</keyword>
<keyword name="=" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>
	<param type="function" name="more"/>

	</params>
	<desc><![CDATA[	Equality. Returns true if x equals y, false if not. Same as
  Java x.equals(y) except it also works for nil, and compares
  numbers and collections in a type-independent manner.  Clojure's immutable data
  structures define equals() (and thus =) as a value, not an identity,
  comparison.]]></desc>
</keyword>
<keyword name="memoize" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>

	</params>
	<desc><![CDATA[	Returns a memoized version of a referentially transparent function. The
  memoized version of the function keeps a cache of the mapping from arguments
  to results and, when calls with the same arguments are repeated often, has
  higher performance at the expense of higher memory use.]]></desc>
</keyword>
<keyword name="var-get" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Gets the value in the var object]]></desc>
</keyword>
<keyword name="unchecked-float" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Coerce to float. Subject to rounding.]]></desc>
</keyword>
<keyword name="range" type="function" returnType=" " definedIn="clojure.core">
	<params>

	</params>
	<desc><![CDATA[	Returns a lazy seq of nums from start (inclusive) to end
  (exclusive), by step, where start defaults to 0, step to 1, and end
  to infinity.]]></desc>
</keyword>
<keyword name="range" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="end"/>

	</params>
	<desc><![CDATA[	Returns a lazy seq of nums from start (inclusive) to end
  (exclusive), by step, where start defaults to 0, step to 1, and end
  to infinity.]]></desc>
</keyword>
<keyword name="range" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="start"/>
	<param type="function" name="end"/>

	</params>
	<desc><![CDATA[	Returns a lazy seq of nums from start (inclusive) to end
  (exclusive), by step, where start defaults to 0, step to 1, and end
  to infinity.]]></desc>
</keyword>
<keyword name="range" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="start"/>
	<param type="function" name="end"/>
	<param type="function" name="step"/>

	</params>
	<desc><![CDATA[	Returns a lazy seq of nums from start (inclusive) to end
  (exclusive), by step, where start defaults to 0, step to 1, and end
  to infinity.]]></desc>
</keyword>
<keyword name="tree-seq" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="branch?"/>
	<param type="function" name="children"/>
	<param type="function" name="root"/>

	</params>
	<desc><![CDATA[	Returns a lazy sequence of the nodes in a tree, via a depth-first walk.
   branch? must be a fn of one arg that returns true if passed a node
   that can have children (but may not).  children must be a fn of one
   arg that returns a sequence of the children. Will only be called on
   nodes for which branch? returns true. Root is the root node of the
  tree.]]></desc>
</keyword>
<keyword name="defmacro" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="name"/>
	<param type="function" name="doc-string?"/>
	<param type="function" name="attr-map?"/>
	<param type="function" name="[params*]"/>
	<param type="function" name="body"/>

	</params>
	<desc><![CDATA[	Like defn, but the resulting function name is declared as a
  macro and will be used as a macro by the compiler when it is
  called.]]></desc>
</keyword>
<keyword name="defmacro" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="name"/>
	<param type="function" name="doc-string?"/>
	<param type="function" name="attr-map?"/>
	<param type="function" name="([params*] body)"/>
	<param type="function" name="+"/>
	<param type="function" name="attr-map?"/>

	</params>
	<desc><![CDATA[	Like defn, but the resulting function name is declared as a
  macro and will be used as a macro by the compiler when it is
  called.]]></desc>
</keyword>
<keyword name="set-validator!" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="iref"/>
	<param type="function" name="validator-fn"/>

	</params>
	<desc><![CDATA[	Sets the validator-fn for a var/ref/agent/atom. validator-fn must be nil or a
  side-effect-free fn of one argument, which will be passed the intended
  new state on any state change. If the new state is unacceptable, the
  validator-fn should return false or throw an exception. If the current state (root
  value if var) is not acceptable to the new validator, an exception
  will be thrown and the validator will not be changed.]]></desc>
</keyword>
<keyword name="aset-double" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="array"/>
	<param type="function" name="idx"/>
	<param type="function" name="val"/>

	</params>
	<desc><![CDATA[	Sets the value at the index/indices. Works on arrays of double. Returns val.]]></desc>
</keyword>
<keyword name="aset-double" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="array"/>
	<param type="function" name="idx"/>
	<param type="function" name="idx2"/>
	<param type="function" name="idxv"/>

	</params>
	<desc><![CDATA[	Sets the value at the index/indices. Works on arrays of double. Returns val.]]></desc>
</keyword>
<keyword name="*'" type="function" returnType=" " definedIn="clojure.core">
	<params>

	</params>
	<desc><![CDATA[	Returns the product of nums. (*) returns 1. Supports arbitrary precision.
  See also: *]]></desc>
</keyword>
<keyword name="*'" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns the product of nums. (*) returns 1. Supports arbitrary precision.
  See also: *]]></desc>
</keyword>
<keyword name="*'" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	Returns the product of nums. (*) returns 1. Supports arbitrary precision.
  See also: *]]></desc>
</keyword>
<keyword name="*'" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>
	<param type="function" name="more"/>

	</params>
	<desc><![CDATA[	Returns the product of nums. (*) returns 1. Supports arbitrary precision.
  See also: *]]></desc>
</keyword>
<keyword name="case" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="e"/>
	<param type="function" name="clauses"/>

	</params>
	<desc><![CDATA[	Takes an expression, and a set of clauses.

  Each clause can take the form of either:

  test-constant result-expr

  (test-constant1 ... test-constantN)  result-expr

  The test-constants are not evaluated. They must be compile-time
  literals, and need not be quoted.  If the expression is equal to a
  test-constant, the corresponding result-expr is returned. A single
  default expression can follow the clauses, and its value will be
  returned if no clause matches. If no default expression is provided
  and no clause matches, an IllegalArgumentException is thrown.

  Unlike cond and condp, case does a constant-time dispatch, the
  clauses are not considered sequentially.  All manner of constant
  expressions are acceptable in case, including numbers, strings,
  symbols, keywords, and (Clojure) composites thereof. Note that since
  lists are used to group multiple constants that map to the same
  expression, a vector can be used to match a list if needed. The
  test-constants need not be all of the same type.]]></desc>
</keyword>
<keyword name="unchecked-divide-int" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	Returns the division of x by y, both int.
  Note - uses a primitive operator subject to truncation.]]></desc>
</keyword>
<keyword name="enumeration-seq" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="e"/>

	</params>
	<desc><![CDATA[	Returns a seq on a java.util.Enumeration]]></desc>
</keyword>
<keyword name="prefer-method" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="multifn"/>
	<param type="function" name="dispatch-val-x"/>
	<param type="function" name="dispatch-val-y"/>

	</params>
	<desc><![CDATA[	Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y 
   when there is a conflict]]></desc>
</keyword>
<keyword name="partition-all" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="n"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a lazy sequence of lists like partition, but may include
  partitions with fewer than n items at the end.]]></desc>
</keyword>
<keyword name="partition-all" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="n"/>
	<param type="function" name="step"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a lazy sequence of lists like partition, but may include
  partitions with fewer than n items at the end.]]></desc>
</keyword>
<keyword name="ensure" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="ref"/>

	</params>
	<desc><![CDATA[	Must be called in a transaction. Protects the ref from modification
  by other transactions.  Returns the in-transaction-value of
  ref. Allows for more concurrency than (ref-set ref @ref)]]></desc>
</keyword>
<keyword name="find-ns" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="sym"/>

	</params>
	<desc><![CDATA[	Returns the namespace named by the symbol or nil if it doesn't exist.]]></desc>
</keyword>
<keyword name="not-every?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="pred"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns false if (pred x) is logical true for every x in
  coll, else true.]]></desc>
</keyword>
<keyword name="struct-map" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="s"/>
	<param type="function" name="inits"/>

	</params>
	<desc><![CDATA[	Returns a new structmap instance with the keys of the
  structure-basis. keyvals may contain all, some or none of the basis
  keys - where values are not supplied they will default to nil.
  keyvals can also contain keys not in the basis.]]></desc>
</keyword>
<keyword name=">" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns non-nil if nums are in monotonically decreasing order,
  otherwise false.]]></desc>
</keyword>
<keyword name=">" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	Returns non-nil if nums are in monotonically decreasing order,
  otherwise false.]]></desc>
</keyword>
<keyword name=">" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>
	<param type="function" name="more"/>

	</params>
	<desc><![CDATA[	Returns non-nil if nums are in monotonically decreasing order,
  otherwise false.]]></desc>
</keyword>
<keyword name="max" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns the greatest of the nums.]]></desc>
</keyword>
<keyword name="max" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	Returns the greatest of the nums.]]></desc>
</keyword>
<keyword name="max" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>
	<param type="function" name="more"/>

	</params>
	<desc><![CDATA[	Returns the greatest of the nums.]]></desc>
</keyword>
<keyword name="proxy-mappings" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="proxy"/>

	</params>
	<desc><![CDATA[	Takes a proxy instance and returns the proxy's fn map.]]></desc>
</keyword>
<keyword name="identity" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns its argument.]]></desc>
</keyword>
<keyword name="ints" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="xs"/>

	</params>
	<desc><![CDATA[	Casts to int[]]]></desc>
</keyword>
<keyword name="fnext" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Same as (first (next x))]]></desc>
</keyword>
<keyword name="biginteger" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Coerce to BigInteger]]></desc>
</keyword>
<keyword name="min-key" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="k"/>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns the x for which (k x), a number, is least.]]></desc>
</keyword>
<keyword name="min-key" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="k"/>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	Returns the x for which (k x), a number, is least.]]></desc>
</keyword>
<keyword name="min-key" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="k"/>
	<param type="function" name="x"/>
	<param type="function" name="y"/>
	<param type="function" name="more"/>

	</params>
	<desc><![CDATA[	Returns the x for which (k x), a number, is least.]]></desc>
</keyword>
<keyword name="reset-meta!" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="iref"/>
	<param type="function" name="metadata-map"/>

	</params>
	<desc><![CDATA[	Atomically resets the metadata for a namespace/var/ref/agent/atom]]></desc>
</keyword>
<keyword name="push-thread-bindings" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="bindings"/>

	</params>
	<desc><![CDATA[	WARNING: This is a low-level function. Prefer high-level macros like
  binding where ever possible.

  Takes a map of Var/value pairs. Binds each Var to the associated value for
  the current thread. Each call *MUST* be accompanied by a matching call to
  pop-thread-bindings wrapped in a try-finally!
  
      (push-thread-bindings bindings)
      (try
        ...
        (finally
          (pop-thread-bindings)))]]></desc>
</keyword>
<keyword name="unchecked-add-int" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	Returns the sum of x and y, both int.
  Note - uses a primitive operator subject to overflow.]]></desc>
</keyword>
<keyword name="subs" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="s"/>
	<param type="function" name="start"/>

	</params>
	<desc><![CDATA[	Returns the substring of s beginning at start inclusive, and ending
  at end (defaults to length of string), exclusive.]]></desc>
</keyword>
<keyword name="subs" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="s"/>
	<param type="function" name="start"/>
	<param type="function" name="end"/>

	</params>
	<desc><![CDATA[	Returns the substring of s beginning at start inclusive, and ending
  at end (defaults to length of string), exclusive.]]></desc>
</keyword>
<keyword name="compile" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="lib"/>

	</params>
	<desc><![CDATA[	Compiles the namespace named by the symbol lib into a set of
  classfiles. The source for the lib must be in a proper
  classpath-relative directory. The output files will go into the
  directory specified by *compile-path*, and that directory too must
  be in the classpath.]]></desc>
</keyword>
<keyword name="agent-errors" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="a"/>

	</params>
	<desc><![CDATA[	DEPRECATED: Use 'agent-error' instead.
  Returns a sequence of the exceptions thrown during asynchronous
  actions of the agent.]]></desc>
</keyword>
<keyword name="clear-agent-errors" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="a"/>

	</params>
	<desc><![CDATA[	DEPRECATED: Use 'restart-agent' instead.
  Clears any exceptions thrown during asynchronous actions of the
  agent, allowing subsequent actions to occur.]]></desc>
</keyword>
<keyword name="printf" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="fmt"/>
	<param type="function" name="args"/>

	</params>
	<desc><![CDATA[	Prints formatted output, as per format]]></desc>
</keyword>
<keyword name="ns-resolve" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="ns"/>
	<param type="function" name="sym"/>

	</params>
	<desc><![CDATA[	Returns the var or Class to which a symbol will be resolved in the
  namespace (unless found in the environement), else nil.  Note that
  if the symbol is fully qualified, the var/Class to which it resolves
  need not be present in the namespace.]]></desc>
</keyword>
<keyword name="ns-resolve" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="ns"/>
	<param type="function" name="env"/>
	<param type="function" name="sym"/>

	</params>
	<desc><![CDATA[	Returns the var or Class to which a symbol will be resolved in the
  namespace (unless found in the environement), else nil.  Note that
  if the symbol is fully qualified, the var/Class to which it resolves
  need not be present in the namespace.]]></desc>
</keyword>
<keyword name="method-sig" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="meth"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name=">=" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns non-nil if nums are in monotonically non-increasing order,
  otherwise false.]]></desc>
</keyword>
<keyword name=">=" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	Returns non-nil if nums are in monotonically non-increasing order,
  otherwise false.]]></desc>
</keyword>
<keyword name=">=" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>
	<param type="function" name="more"/>

	</params>
	<desc><![CDATA[	Returns non-nil if nums are in monotonically non-increasing order,
  otherwise false.]]></desc>
</keyword>
<keyword name="shutdown-agents" type="function" returnType=" " definedIn="clojure.core">
	<params>

	</params>
	<desc><![CDATA[	Initiates a shutdown of the thread pools that back the agent
  system. Running actions will complete, but no new actions will be
  accepted]]></desc>
</keyword>
<keyword name="reset!" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="atom"/>
	<param type="function" name="newval"/>

	</params>
	<desc><![CDATA[	Sets the value of atom to newval without regard for the
  current value. Returns newval.]]></desc>
</keyword>
<keyword name="even?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="n"/>

	</params>
	<desc><![CDATA[	Returns true if n is even, throws an exception if n is not an integer]]></desc>
</keyword>
<keyword name="require" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="args"/>

	</params>
	<desc><![CDATA[	Loads libs, skipping any that are already loaded. Each argument is
  either a libspec that identifies a lib, a prefix list that identifies
  multiple libs whose names share a common prefix, or a flag that modifies
  how all the identified libs are loaded. Use :require in the ns macro
  in preference to calling this directly.

  Libs

  A 'lib' is a named set of resources in classpath whose contents define a
  library of Clojure code. Lib names are symbols and each lib is associated
  with a Clojure namespace and a Java package that share its name. A lib's
  name also locates its root directory within classpath using Java's
  package name to classpath-relative path mapping. All resources in a lib
  should be contained in the directory structure under its root directory.
  All definitions a lib makes should be in its associated namespace.

  'require loads a lib by loading its root resource. The root resource path
  is derived from the lib name in the following manner:
  Consider a lib named by the symbol 'x.y.z; it has the root directory
  <classpath>/x/y/, and its root resource is <classpath>/x/y/z.clj. The root
  resource should contain code to create the lib's namespace (usually by using
  the ns macro) and load any additional lib resources.

  Libspecs

  A libspec is a lib name or a vector containing a lib name followed by
  options expressed as sequential keywords and arguments.

  Recognized options: :as
  :as takes a symbol as its argument and makes that symbol an alias to the
    lib's namespace in the current namespace.

  Prefix Lists

  It's common for Clojure code to depend on several libs whose names have
  the same prefix. When specifying libs, prefix lists can be used to reduce
  repetition. A prefix list contains the shared prefix followed by libspecs
  with the shared prefix removed from the lib names. After removing the
  prefix, the names that remain must not contain any periods.

  Flags

  A flag is a keyword.
  Recognized flags: :reload, :reload-all, :verbose
  :reload forces loading of all the identified libs even if they are
    already loaded
  :reload-all implies :reload and also forces loading of all libs that the
    identified libs directly or indirectly load via require or use
  :verbose triggers printing information about each load, alias, and refer

  Example:

  The following would load the libraries clojure.zip and clojure.set
  abbreviated as 's'.

  (require '(clojure zip [set :as s]))]]></desc>
</keyword>
<keyword name="bit-shift-left" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="n"/>

	</params>
	<desc><![CDATA[	Bitwise shift left]]></desc>
</keyword>
<keyword name="dec'" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns a number one less than num. Supports arbitrary precision.
  See also: dec]]></desc>
</keyword>
<keyword name="methods" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="multifn"/>

	</params>
	<desc><![CDATA[	Given a multimethod, returns a map of dispatch values -> dispatch fns]]></desc>
</keyword>
<keyword name="future-cancelled?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>

	</params>
	<desc><![CDATA[	Returns true if future f is cancelled]]></desc>
</keyword>
<keyword name="compare" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	Comparator. Returns a negative number, zero, or a positive number
  when x is logically 'less than', 'equal to', or 'greater than'
  y. Same as Java x.compareTo(y) except it also works for nil, and
  compares numbers and collections in a type-independent manner. x
  must implement Comparable]]></desc>
</keyword>
<keyword name="deftype" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="name"/>
	<param type="function" name="[fields]"/>
	<param type="function" name="opts+specs"/>

	</params>
	<desc><![CDATA[	Alpha - subject to change
  
  (deftype name [fields*]  options* specs*)
  
  Currently there are no options.

  Each spec consists of a protocol or interface name followed by zero
  or more method bodies:

  protocol-or-interface-or-Object
  (methodName [args*] body)*

  Dynamically generates compiled bytecode for class with the given
  name, in a package with the same name as the current namespace, the
  given fields, and, optionally, methods for protocols and/or
  interfaces. 

  The class will have the (by default, immutable) fields named by
  fields, which can have type hints. Protocols/interfaces and methods
  are optional. The only methods that can be supplied are those
  declared in the protocols/interfaces.  Note that method bodies are
  not closures, the local environment includes only the named fields,
  and those fields can be accessed directy. Fields can be qualified
  with the metadata :volatile-mutable true or :unsynchronized-mutable
  true, at which point (set! afield aval) will be supported in method
  bodies. Note well that mutable fields are extremely difficult to use
  correctly, and are present only to facilitate the building of higher
  level constructs, such as Clojure's reference types, in Clojure
  itself. They are for experts only - if the semantics and
  implications of :volatile-mutable or :unsynchronized-mutable are not
  immediately apparent to you, you should not be using them.

  Method definitions take the form:

  (methodname [args*] body)

  The argument and return types can be hinted on the arg and
  methodname symbols. If not supplied, they will be inferred, so type
  hints should be reserved for disambiguation.

  Methods should be supplied for all methods of the desired
  protocol(s) and interface(s). You can also define overrides for
  methods of Object. Note that a parameter must be supplied to
  correspond to the target object ('this' in Java parlance). Thus
  methods for interfaces will take one more argument than do the
  interface declarations. Note also that recur calls to the method
  head should *not* pass the target object, it will be supplied
  automatically and can not be substituted.

  In the method bodies, the (unqualified) name can be used to name the
  class (for calls to new, instance? etc).

  When AOT compiling, generates compiled bytecode for a class with the
  given name (a symbol), prepends the current ns as the package, and
  writes the .class file to the *compile-path* directory.

  One constructors will be defined, taking the designated fields.]]></desc>
</keyword>
<keyword name="sorted-set-by" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="comparator"/>
	<param type="function" name="keys"/>

	</params>
	<desc><![CDATA[	Returns a new sorted set with supplied keys, using the supplied comparator.]]></desc>
</keyword>
<keyword name="cast" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="c"/>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Throws a ClassCastException if x is not a c, else returns x.]]></desc>
</keyword>
<keyword name="namespace-munge" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="ns"/>

	</params>
	<desc><![CDATA[	Convert a Clojure namespace name to a legal Java package name.]]></desc>
</keyword>
<keyword name="supers" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="class"/>

	</params>
	<desc><![CDATA[	Returns the immediate and indirect superclasses and interfaces of c, if any]]></desc>
</keyword>
<keyword name="pcalls" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="fns"/>

	</params>
	<desc><![CDATA[	Executes the no-arg fns in parallel, returning a lazy sequence of
  their values]]></desc>
</keyword>
<keyword name="load-string" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="s"/>

	</params>
	<desc><![CDATA[	Sequentially read and evaluate the set of forms contained in the
  string]]></desc>
</keyword>
<keyword name="group-by" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a map of the elements of coll keyed by the result of
  f on each element. The value at each key will be a vector of the
  corresponding elements, in the order they appeared in coll.]]></desc>
</keyword>
<keyword name="get" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="map"/>
	<param type="function" name="key"/>

	</params>
	<desc><![CDATA[	Returns the value mapped to key, not-found or nil if key not present.]]></desc>
</keyword>
<keyword name="get" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="map"/>
	<param type="function" name="key"/>
	<param type="function" name="not-found"/>

	</params>
	<desc><![CDATA[	Returns the value mapped to key, not-found or nil if key not present.]]></desc>
</keyword>
<keyword name="await" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="agents"/>

	</params>
	<desc><![CDATA[	Blocks the current thread (indefinitely!) until all actions
  dispatched thus far, from this thread or agent, to the agent(s) have
  occurred.  Will block on failed agents.  Will never return if
  a failed agent is restarted with :clear-actions true.]]></desc>
</keyword>
<keyword name="resolve" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="sym"/>

	</params>
	<desc><![CDATA[	same as (ns-resolve *ns* symbol) or (ns-resolve *ns* &env symbol)]]></desc>
</keyword>
<keyword name="resolve" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="env"/>
	<param type="function" name="sym"/>

	</params>
	<desc><![CDATA[	same as (ns-resolve *ns* symbol) or (ns-resolve *ns* &env symbol)]]></desc>
</keyword>
<keyword name="bytes" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="xs"/>

	</params>
	<desc><![CDATA[	Casts to bytes[]]]></desc>
</keyword>
<keyword name="bound?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="vars"/>

	</params>
	<desc><![CDATA[	Returns true if all of the vars provided as arguments have any bound value, root or thread-local.
   Implies that deref'ing the provided vars will succeed. Returns true if no vars are provided.]]></desc>
</keyword>
<keyword name="loaded-libs" type="function" returnType=" " definedIn="clojure.core">
	<params>

	</params>
	<desc><![CDATA[	Returns a sorted set of symbols naming the currently loaded libs]]></desc>
</keyword>
<keyword name="fnil" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Takes a function f, and returns a function that calls f, replacing
  a nil first argument to f with the supplied value x. Higher arity
  versions can replace arguments in the second and third
  positions (y, z). Note that the function f can take any number of
  arguments, not just the one(s) being nil-patched.]]></desc>
</keyword>
<keyword name="fnil" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	Takes a function f, and returns a function that calls f, replacing
  a nil first argument to f with the supplied value x. Higher arity
  versions can replace arguments in the second and third
  positions (y, z). Note that the function f can take any number of
  arguments, not just the one(s) being nil-patched.]]></desc>
</keyword>
<keyword name="fnil" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="x"/>
	<param type="function" name="y"/>
	<param type="function" name="z"/>

	</params>
	<desc><![CDATA[	Takes a function f, and returns a function that calls f, replacing
  a nil first argument to f with the supplied value x. Higher arity
  versions can replace arguments in the second and third
  positions (y, z). Note that the function f can take any number of
  arguments, not just the one(s) being nil-patched.]]></desc>
</keyword>
<keyword name="force" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	If x is a Delay, returns the (possibly cached) value of its expression, else returns x]]></desc>
</keyword>
<keyword name="partial" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="arg1"/>

	</params>
	<desc><![CDATA[	Takes a function f and fewer than the normal arguments to f, and
  returns a fn that takes a variable number of additional args. When
  called, the returned function calls f with args + additional args.]]></desc>
</keyword>
<keyword name="partial" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="arg1"/>
	<param type="function" name="arg2"/>

	</params>
	<desc><![CDATA[	Takes a function f and fewer than the normal arguments to f, and
  returns a fn that takes a variable number of additional args. When
  called, the returned function calls f with args + additional args.]]></desc>
</keyword>
<keyword name="partial" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="arg1"/>
	<param type="function" name="arg2"/>
	<param type="function" name="arg3"/>

	</params>
	<desc><![CDATA[	Takes a function f and fewer than the normal arguments to f, and
  returns a fn that takes a variable number of additional args. When
  called, the returned function calls f with args + additional args.]]></desc>
</keyword>
<keyword name="partial" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="arg1"/>
	<param type="function" name="arg2"/>
	<param type="function" name="arg3"/>
	<param type="function" name="more"/>

	</params>
	<desc><![CDATA[	Takes a function f and fewer than the normal arguments to f, and
  returns a fn that takes a variable number of additional args. When
  called, the returned function calls f with args + additional args.]]></desc>
</keyword>
<keyword name="pmap" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Like map, except f is applied in parallel. Semi-lazy in that the
  parallel computation stays ahead of the consumption, but doesn't
  realize the entire result unless required. Only useful for
  computationally intensive functions where the time of f dominates
  the coordination overhead.]]></desc>
</keyword>
<keyword name="pmap" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="coll"/>
	<param type="function" name="colls"/>

	</params>
	<desc><![CDATA[	Like map, except f is applied in parallel. Semi-lazy in that the
  parallel computation stays ahead of the consumption, but doesn't
  realize the entire result unless required. Only useful for
  computationally intensive functions where the time of f dominates
  the coordination overhead.]]></desc>
</keyword>
<keyword name="if-let" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="bindings"/>
	<param type="function" name="then"/>

	</params>
	<desc><![CDATA[	bindings => binding-form test

  If test is true, evaluates then with binding-form bound to the value of 
  test, if not, yields else]]></desc>
</keyword>
<keyword name="if-let" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="bindings"/>
	<param type="function" name="then"/>
	<param type="function" name="else"/>
	<param type="function" name="oldform"/>

	</params>
	<desc><![CDATA[	bindings => binding-form test

  If test is true, evaluates then with binding-form bound to the value of 
  test, if not, yields else]]></desc>
</keyword>
<keyword name="comparator" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="pred"/>

	</params>
	<desc><![CDATA[	Returns an implementation of java.util.Comparator based upon pred.]]></desc>
</keyword>
<keyword name="pos?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns true if num is greater than zero, else false]]></desc>
</keyword>
<keyword name="char" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Coerce to char]]></desc>
</keyword>
<keyword name="take-while" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="pred"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a lazy sequence of successive items from coll while
  (pred item) returns true. pred must be free of side-effects.]]></desc>
</keyword>
<keyword name="extend-protocol" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="p"/>
	<param type="function" name="specs"/>

	</params>
	<desc><![CDATA[	Useful when you want to provide several implementations of the same
  protocol all at once. Takes a single protocol and the implementation
  of that protocol for one or more types. Expands into calls to
  extend-type:

  (extend-protocol Protocol
    AType
      (foo [x] ...)
      (bar [x y] ...)
    BType
      (foo [x] ...)
      (bar [x y] ...)
    AClass
      (foo [x] ...)
      (bar [x y] ...)
    nil
      (foo [x] ...)
      (bar [x y] ...))

  expands into:

  (do
   (clojure.core/extend-type AType Protocol 
     (foo [x] ...) 
     (bar [x y] ...))
   (clojure.core/extend-type BType Protocol 
     (foo [x] ...) 
     (bar [x y] ...))
   (clojure.core/extend-type AClass Protocol 
     (foo [x] ...) 
     (bar [x y] ...))
   (clojure.core/extend-type nil Protocol 
     (foo [x] ...) 
     (bar [x y] ...)))]]></desc>
</keyword>
<keyword name="and" type="function" returnType=" " definedIn="clojure.core">
	<params>

	</params>
	<desc><![CDATA[	Evaluates exprs one at a time, from left to right. If a form
  returns logical false (nil or false), and returns that value and
  doesn't evaluate any of the other expressions, otherwise it returns
  the value of the last expr. (and) returns true.]]></desc>
</keyword>
<keyword name="and" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Evaluates exprs one at a time, from left to right. If a form
  returns logical false (nil or false), and returns that value and
  doesn't evaluate any of the other expressions, otherwise it returns
  the value of the last expr. (and) returns true.]]></desc>
</keyword>
<keyword name="and" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="next"/>

	</params>
	<desc><![CDATA[	Evaluates exprs one at a time, from left to right. If a form
  returns logical false (nil or false), and returns that value and
  doesn't evaluate any of the other expressions, otherwise it returns
  the value of the last expr. (and) returns true.]]></desc>
</keyword>
<keyword name="refer" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="ns-sym"/>
	<param type="function" name="filters"/>

	</params>
	<desc><![CDATA[	refers to all public vars of ns, subject to filters.
  filters can include at most one each of:

  :exclude list-of-symbols
  :only list-of-symbols
  :rename map-of-fromsymbol-tosymbol

  For each public interned var in the namespace named by the symbol,
  adds a mapping from the name of the var to the var to the current
  namespace.  Throws an exception if name is already mapped to
  something else in the current namespace. Filters can be used to
  select a subset, via inclusion or exclusion, or to provide a mapping
  to a symbol different from the var's name, in order to prevent
  clashes. Use :use in the ns macro in preference to calling this directly.]]></desc>
</keyword>
<keyword name="underive" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="tag"/>
	<param type="function" name="parent"/>

	</params>
	<desc><![CDATA[	Removes a parent/child relationship between parent and
  tag. h must be a hierarchy obtained from make-hierarchy, if not
  supplied defaults to, and modifies, the global hierarchy.]]></desc>
</keyword>
<keyword name="underive" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="h"/>
	<param type="function" name="tag"/>
	<param type="function" name="parent"/>

	</params>
	<desc><![CDATA[	Removes a parent/child relationship between parent and
  tag. h must be a hierarchy obtained from make-hierarchy, if not
  supplied defaults to, and modifies, the global hierarchy.]]></desc>
</keyword>
<keyword name="in-ns" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="name"/>

	</params>
	<desc><![CDATA[	Sets *ns* to the namespace named by the symbol, creating it if needed.]]></desc>
</keyword>
<keyword name="iterator-seq" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="iter"/>

	</params>
	<desc><![CDATA[	Returns a seq on a java.util.Iterator. Note that most collections
  providing iterators implement Iterable and thus support seq directly.]]></desc>
</keyword>
<keyword name="declare" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="names"/>

	</params>
	<desc><![CDATA[	defs the supplied var names with no bindings, useful for making forward declarations.]]></desc>
</keyword>
<keyword name="ancestors" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="tag"/>

	</params>
	<desc><![CDATA[	Returns the immediate and indirect parents of tag, either via a Java type
  inheritance relationship or a relationship established via derive. h
  must be a hierarchy obtained from make-hierarchy, if not supplied
  defaults to the global hierarchy]]></desc>
</keyword>
<keyword name="ancestors" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="h"/>
	<param type="function" name="tag"/>

	</params>
	<desc><![CDATA[	Returns the immediate and indirect parents of tag, either via a Java type
  inheritance relationship or a relationship established via derive. h
  must be a hierarchy obtained from make-hierarchy, if not supplied
  defaults to the global hierarchy]]></desc>
</keyword>
<keyword name="hash-combine" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="persistent!" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Alpha - subject to change.
  Returns a new, persistent version of the transient collection, in
  constant time. The transient collection cannot be used after this
  call, any such use will throw an exception.]]></desc>
</keyword>
<keyword name="locking" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="body"/>

	</params>
	<desc><![CDATA[	Executes exprs in an implicit do, while holding the monitor of x.
  Will release the monitor of x in all circumstances.]]></desc>
</keyword>
<keyword name="partition" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="n"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a lazy sequence of lists of n items each, at offsets step
  apart. If step is not supplied, defaults to n, i.e. the partitions
  do not overlap. If a pad collection is supplied, use its elements as
  necessary to complete last partition upto n items. In case there are
  not enough padding elements, return a partition with less than n items.]]></desc>
</keyword>
<keyword name="partition" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="n"/>
	<param type="function" name="step"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a lazy sequence of lists of n items each, at offsets step
  apart. If step is not supplied, defaults to n, i.e. the partitions
  do not overlap. If a pad collection is supplied, use its elements as
  necessary to complete last partition upto n items. In case there are
  not enough padding elements, return a partition with less than n items.]]></desc>
</keyword>
<keyword name="partition" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="n"/>
	<param type="function" name="step"/>
	<param type="function" name="pad"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a lazy sequence of lists of n items each, at offsets step
  apart. If step is not supplied, defaults to n, i.e. the partitions
  do not overlap. If a pad collection is supplied, use its elements as
  necessary to complete last partition upto n items. In case there are
  not enough padding elements, return a partition with less than n items.]]></desc>
</keyword>
<keyword name="map-indexed" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a lazy sequence consisting of the result of applying f to 0
  and the first item of coll, followed by applying f to 1 and the second
  item in coll, etc, until coll is exhausted. Thus function f should
  accept 2 arguments, index and item.]]></desc>
</keyword>
<keyword name="contains?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>
	<param type="function" name="key"/>

	</params>
	<desc><![CDATA[	Returns true if key is present in the given collection, otherwise
  returns false.  Note that for numerically indexed collections like
  vectors and Java arrays, this tests if the numeric key is within the
  range of indexes. 'contains?' operates constant or logarithmic time;
  it will not perform a linear search for a value.  See also 'some'.]]></desc>
</keyword>
<keyword name="update-proxy" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="proxy"/>
	<param type="function" name="mappings"/>

	</params>
	<desc><![CDATA[	Takes a proxy instance and a map of strings (which must
  correspond to methods of the proxy superclass/superinterfaces) to
  fns (which must take arguments matching the corresponding method,
  plus an additional (explicit) first arg corresponding to this, and
  updates (via assoc) the proxy's fn map. nil can be passed instead of
  a fn, in which case the corresponding method will revert to the
  default behavior. Note that this function can be used to update the
  behavior of an existing instance without changing its identity.
  Returns the proxy.]]></desc>
</keyword>
<keyword name="interpose" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="sep"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a lazy seq of the elements of coll separated by sep]]></desc>
</keyword>
<keyword name="chunk" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="b"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="aset-int" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="array"/>
	<param type="function" name="idx"/>
	<param type="function" name="val"/>

	</params>
	<desc><![CDATA[	Sets the value at the index/indices. Works on arrays of int. Returns val.]]></desc>
</keyword>
<keyword name="aset-int" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="array"/>
	<param type="function" name="idx"/>
	<param type="function" name="idx2"/>
	<param type="function" name="idxv"/>

	</params>
	<desc><![CDATA[	Sets the value at the index/indices. Works on arrays of int. Returns val.]]></desc>
</keyword>
<keyword name="ifn?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns true if x implements IFn. Note that many data structures
  (e.g. sets and maps) implement IFn]]></desc>
</keyword>
<keyword name="definterface" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="name"/>
	<param type="function" name="sigs"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="load-file" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="name"/>

	</params>
	<desc><![CDATA[	Sequentially read and evaluate the set of forms contained in the file.]]></desc>
</keyword>
<keyword name="delay" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="body"/>

	</params>
	<desc><![CDATA[	Takes a body of expressions and yields a Delay object that will
  invoke the body only the first time it is forced (with force or deref/@), and
  will cache the result and return it on all subsequent force
  calls. See also - realized?]]></desc>
</keyword>
<keyword name="apply" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="args"/>

	</params>
	<desc><![CDATA[	Applies fn f to the argument list formed by prepending intervening arguments to args.]]></desc>
</keyword>
<keyword name="apply" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="x"/>
	<param type="function" name="args"/>

	</params>
	<desc><![CDATA[	Applies fn f to the argument list formed by prepending intervening arguments to args.]]></desc>
</keyword>
<keyword name="apply" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="x"/>
	<param type="function" name="y"/>
	<param type="function" name="args"/>

	</params>
	<desc><![CDATA[	Applies fn f to the argument list formed by prepending intervening arguments to args.]]></desc>
</keyword>
<keyword name="apply" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="x"/>
	<param type="function" name="y"/>
	<param type="function" name="z"/>
	<param type="function" name="args"/>

	</params>
	<desc><![CDATA[	Applies fn f to the argument list formed by prepending intervening arguments to args.]]></desc>
</keyword>
<keyword name="apply" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="a"/>
	<param type="function" name="b"/>
	<param type="function" name="c"/>
	<param type="function" name="d"/>
	<param type="function" name="args"/>

	</params>
	<desc><![CDATA[	Applies fn f to the argument list formed by prepending intervening arguments to args.]]></desc>
</keyword>
<keyword name="swap!" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="atom"/>
	<param type="function" name="f"/>

	</params>
	<desc><![CDATA[	Atomically swaps the value of atom to be:
  (apply f current-value-of-atom args). Note that f may be called
  multiple times, and thus should be free of side effects.  Returns
  the value that was swapped in.]]></desc>
</keyword>
<keyword name="swap!" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="atom"/>
	<param type="function" name="f"/>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Atomically swaps the value of atom to be:
  (apply f current-value-of-atom args). Note that f may be called
  multiple times, and thus should be free of side effects.  Returns
  the value that was swapped in.]]></desc>
</keyword>
<keyword name="swap!" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="atom"/>
	<param type="function" name="f"/>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	Atomically swaps the value of atom to be:
  (apply f current-value-of-atom args). Note that f may be called
  multiple times, and thus should be free of side effects.  Returns
  the value that was swapped in.]]></desc>
</keyword>
<keyword name="swap!" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="atom"/>
	<param type="function" name="f"/>
	<param type="function" name="x"/>
	<param type="function" name="y"/>
	<param type="function" name="args"/>

	</params>
	<desc><![CDATA[	Atomically swaps the value of atom to be:
  (apply f current-value-of-atom args). Note that f may be called
  multiple times, and thus should be free of side effects.  Returns
  the value that was swapped in.]]></desc>
</keyword>
<keyword name="defmulti" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="name"/>
	<param type="function" name="docstring?"/>
	<param type="function" name="attr-map?"/>
	<param type="function" name="dispatch-fn"/>
	<param type="function" name="options"/>

	</params>
	<desc><![CDATA[	Creates a new multimethod with the associated dispatch function.
  The docstring and attribute-map are optional.

  Options are key-value pairs and may be one of:
    :default    the default dispatch value, defaults to :default
    :hierarchy  the isa? hierarchy to use for dispatching
                defaults to the global hierarchy]]></desc>
</keyword>
<keyword name="proxy" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="class-and-interfaces"/>
	<param type="function" name="args"/>
	<param type="function" name="fs"/>

	</params>
	<desc><![CDATA[	class-and-interfaces - a vector of class names

  args - a (possibly empty) vector of arguments to the superclass
  constructor.

  f => (name [params*] body) or
  (name ([params*] body) ([params+] body) ...)

  Expands to code which creates a instance of a proxy class that
  implements the named class/interface(s) by calling the supplied
  fns. A single class, if provided, must be first. If not provided it
  defaults to Object.

  The interfaces names must be valid interface types. If a method fn
  is not provided for a class method, the superclass methd will be
  called. If a method fn is not provided for an interface method, an
  UnsupportedOperationException will be thrown should it be
  called. Method fns are closures and can capture the environment in
  which proxy is called. Each method fn takes an additional implicit
  first arg, which is bound to 'this. Note that while method fns can
  be provided to override protected methods, they have no other access
  to protected members, nor to super, as these capabilities cannot be
  proxied.]]></desc>
</keyword>
<keyword name="reify" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="opts+specs"/>

	</params>
	<desc><![CDATA[	reify is a macro with the following structure:

 (reify options* specs*)
  
  Currently there are no options.

  Each spec consists of the protocol or interface name followed by zero
  or more method bodies:

  protocol-or-interface-or-Object
  (methodName [args+] body)*

  Methods should be supplied for all methods of the desired
  protocol(s) and interface(s). You can also define overrides for
  methods of Object. Note that the first parameter must be supplied to
  correspond to the target object ('this' in Java parlance). Thus
  methods for interfaces will take one more argument than do the
  interface declarations.  Note also that recur calls to the method
  head should *not* pass the target object, it will be supplied
  automatically and can not be substituted.

  The return type can be indicated by a type hint on the method name,
  and arg types can be indicated by a type hint on arg names. If you
  leave out all hints, reify will try to match on same name/arity
  method in the protocol(s)/interface(s) - this is preferred. If you
  supply any hints at all, no inference is done, so all hints (or
  default of Object) must be correct, for both arguments and return
  type. If a method is overloaded in a protocol/interface, multiple
  independent method definitions must be supplied.  If overloaded with
  same arity in an interface you must specify complete hints to
  disambiguate - a missing hint implies Object.

  recur works to method heads The method bodies of reify are lexical
  closures, and can refer to the surrounding local scope:
  
  (str (let [f "foo"] 
       (reify Object 
         (toString [this] f))))
  == "foo"

  (seq (let [f "foo"] 
       (reify clojure.lang.Seqable 
         (seq [this] (seq f)))))
  == (\f \o \o))]]></desc>
</keyword>
<keyword name="subvec" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="v"/>
	<param type="function" name="start"/>

	</params>
	<desc><![CDATA[	Returns a persistent vector of the items in vector from
  start (inclusive) to end (exclusive).  If end is not supplied,
  defaults to (count vector). This operation is O(1) and very fast, as
  the resulting vector shares structure with the original and no
  trimming is done.]]></desc>
</keyword>
<keyword name="subvec" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="v"/>
	<param type="function" name="start"/>
	<param type="function" name="end"/>

	</params>
	<desc><![CDATA[	Returns a persistent vector of the items in vector from
  start (inclusive) to end (exclusive).  If end is not supplied,
  defaults to (count vector). This operation is O(1) and very fast, as
  the resulting vector shares structure with the original and no
  trimming is done.]]></desc>
</keyword>
<keyword name="byte-array" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="size-or-seq"/>

	</params>
	<desc><![CDATA[	Creates an array of bytes]]></desc>
</keyword>
<keyword name="byte-array" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="size"/>
	<param type="function" name="init-val-or-seq"/>

	</params>
	<desc><![CDATA[	Creates an array of bytes]]></desc>
</keyword>
<keyword name="rest" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a possibly empty seq of the items after the first. Calls seq on its
  argument.]]></desc>
</keyword>
<keyword name="keyword" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="name"/>

	</params>
	<desc><![CDATA[	Returns a Keyword with the given namespace and name.  Do not use :
  in the keyword strings, it will be added automatically.]]></desc>
</keyword>
<keyword name="keyword" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="ns"/>
	<param type="function" name="name"/>

	</params>
	<desc><![CDATA[	Returns a Keyword with the given namespace and name.  Do not use :
  in the keyword strings, it will be added automatically.]]></desc>
</keyword>
<keyword name="ns-map" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="ns"/>

	</params>
	<desc><![CDATA[	Returns a map of all the mappings for the namespace.]]></desc>
</keyword>
<keyword name="set-error-mode!" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="a"/>
	<param type="function" name="mode-keyword"/>

	</params>
	<desc><![CDATA[	Sets the error-mode of agent a to mode-keyword, which must be
  either :fail or :continue.  If an action being run by the agent
  throws an exception or doesn't pass the validator fn, an
  error-handler may be called (see set-error-handler!), after which,
  if the mode is :continue, the agent will continue as if neither the
  action that caused the error nor the error itself ever happened.
  
  If the mode is :fail, the agent will become failed and will stop
  accepting new 'send' and 'send-off' actions, and any previously
  queued actions will be held until a 'restart-agent'.  Deref will
  still work, returning the state of the agent before the error.]]></desc>
</keyword>
<keyword name="int" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Coerce to int]]></desc>
</keyword>
<keyword name="release-pending-sends" type="function" returnType=" " definedIn="clojure.core">
	<params>

	</params>
	<desc><![CDATA[	Normally, actions sent directly or indirectly during another action
  are held until the action completes (changes the agent's
  state). This function can be used to dispatch any pending sent
  actions immediately. This has no impact on actions sent during a
  transaction, which are still held until commit. If no action is
  occurring, does nothing. Returns the number of actions dispatched.]]></desc>
</keyword>
<keyword name="mod" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="num"/>
	<param type="function" name="div"/>

	</params>
	<desc><![CDATA[	Modulus of num and div. Truncates toward negative infinity.]]></desc>
</keyword>
<keyword name="bigdec" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Coerce to BigDecimal]]></desc>
</keyword>
<keyword name="nfirst" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Same as (next (first x))]]></desc>
</keyword>
<keyword name="nthnext" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>
	<param type="function" name="n"/>

	</params>
	<desc><![CDATA[	Returns the nth next of coll, (seq coll) when n is 0.]]></desc>
</keyword>
<keyword name="aset-long" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="array"/>
	<param type="function" name="idx"/>
	<param type="function" name="val"/>

	</params>
	<desc><![CDATA[	Sets the value at the index/indices. Works on arrays of long. Returns val.]]></desc>
</keyword>
<keyword name="aset-long" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="array"/>
	<param type="function" name="idx"/>
	<param type="function" name="idx2"/>
	<param type="function" name="idxv"/>

	</params>
	<desc><![CDATA[	Sets the value at the index/indices. Works on arrays of long. Returns val.]]></desc>
</keyword>
<keyword name="struct" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="s"/>
	<param type="function" name="vals"/>

	</params>
	<desc><![CDATA[	Returns a new structmap instance with the keys of the
  structure-basis. vals must be supplied for basis keys in order -
  where values are not supplied they will default to nil.]]></desc>
</keyword>
<keyword name="array-map" type="function" returnType=" " definedIn="clojure.core">
	<params>

	</params>
	<desc><![CDATA[	Constructs an array-map.]]></desc>
</keyword>
<keyword name="array-map" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="keyvals"/>

	</params>
	<desc><![CDATA[	Constructs an array-map.]]></desc>
</keyword>
<keyword name="unchecked-char" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Coerce to char. Subject to rounding or truncation.]]></desc>
</keyword>
<keyword name="bigint" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Coerce to BigInt]]></desc>
</keyword>
<keyword name="dec" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns a number one less than num. Does not auto-promote
  longs, will throw on overflow. See also: dec']]></desc>
</keyword>
<keyword name="println" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="more"/>

	</params>
	<desc><![CDATA[	Same as print followed by (newline)]]></desc>
</keyword>
<keyword name="aget" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="array"/>
	<param type="function" name="idx"/>

	</params>
	<desc><![CDATA[	Returns the value at the index/indices. Works on Java arrays of all
  types.]]></desc>
</keyword>
<keyword name="aget" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="array"/>
	<param type="function" name="idx"/>
	<param type="function" name="idxs"/>

	</params>
	<desc><![CDATA[	Returns the value at the index/indices. Works on Java arrays of all
  types.]]></desc>
</keyword>
<keyword name="find-keyword" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="name"/>

	</params>
	<desc><![CDATA[	Returns a Keyword with the given namespace and name if one already
  exists.  This function will not intern a new keyword. If the keyword
  has not already been interned, it will return nil.  Do not use :
  in the keyword strings, it will be added automatically.]]></desc>
</keyword>
<keyword name="find-keyword" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="ns"/>
	<param type="function" name="name"/>

	</params>
	<desc><![CDATA[	Returns a Keyword with the given namespace and name if one already
  exists.  This function will not intern a new keyword. If the keyword
  has not already been interned, it will return nil.  Do not use :
  in the keyword strings, it will be added automatically.]]></desc>
</keyword>
<keyword name="pr" type="function" returnType=" " definedIn="clojure.core">
	<params>

	</params>
	<desc><![CDATA[	Prints the object(s) to the output stream that is the current value
  of *out*.  Prints the object(s), separated by spaces if there is
  more than one.  By default, pr and prn print in a way that objects
  can be read by the reader]]></desc>
</keyword>
<keyword name="pr" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Prints the object(s) to the output stream that is the current value
  of *out*.  Prints the object(s), separated by spaces if there is
  more than one.  By default, pr and prn print in a way that objects
  can be read by the reader]]></desc>
</keyword>
<keyword name="pr" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="more"/>

	</params>
	<desc><![CDATA[	Prints the object(s) to the output stream that is the current value
  of *out*.  Prints the object(s), separated by spaces if there is
  more than one.  By default, pr and prn print in a way that objects
  can be read by the reader]]></desc>
</keyword>
<keyword name="drop" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="n"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a lazy sequence of all but the first n items in coll.]]></desc>
</keyword>
<keyword name="clojure-version" type="function" returnType=" " definedIn="clojure.core">
	<params>

	</params>
	<desc><![CDATA[	Returns clojure version as a printable string.]]></desc>
</keyword>
<keyword name="gen-class" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="options"/>

	</params>
	<desc><![CDATA[	When compiling, generates compiled bytecode for a class with the
  given package-qualified :name (which, as all names in these
  parameters, can be a string or symbol), and writes the .class file
  to the *compile-path* directory.  When not compiling, does
  nothing. The gen-class construct contains no implementation, as the
  implementation will be dynamically sought by the generated class in
  functions in an implementing Clojure namespace. Given a generated
  class org.mydomain.MyClass with a method named mymethod, gen-class
  will generate an implementation that looks for a function named by 
  (str prefix mymethod) (default prefix: "-") in a
  Clojure namespace specified by :impl-ns
  (defaults to the current namespace). All inherited methods,
  generated methods, and init and main functions (see :methods, :init,
  and :main below) will be found similarly prefixed. By default, the
  static initializer for the generated class will attempt to load the
  Clojure support code for the class as a resource from the classpath,
  e.g. in the example case, ``org/mydomain/MyClass__init.class``. This
  behavior can be controlled by :load-impl-ns

  Note that methods with a maximum of 18 parameters are supported.

  In all subsequent sections taking types, the primitive types can be
  referred to by their Java names (int, float etc), and classes in the
  java.lang package can be used without a package qualifier. All other
  classes must be fully qualified.

  Options should be a set of key/value pairs, all except for :name are optional:

  :name aname

  The package-qualified name of the class to be generated

  :extends aclass

  Specifies the superclass, the non-private methods of which will be
  overridden by the class. If not provided, defaults to Object.

  :implements [interface ...]

  One or more interfaces, the methods of which will be implemented by the class.

  :init name

  If supplied, names a function that will be called with the arguments
  to the constructor. Must return [ [superclass-constructor-args] state] 
  If not supplied, the constructor args are passed directly to
  the superclass constructor and the state will be nil

  :constructors {[param-types] [super-param-types], ...}

  By default, constructors are created for the generated class which
  match the signature(s) of the constructors for the superclass. This
  parameter may be used to explicitly specify constructors, each entry
  providing a mapping from a constructor signature to a superclass
  constructor signature. When you supply this, you must supply an :init
  specifier. 

  :post-init name

  If supplied, names a function that will be called with the object as
  the first argument, followed by the arguments to the constructor.
  It will be called every time an object of this class is created,
  immediately after all the inherited constructors have completed.
  It's return value is ignored.

  :methods [ [name [param-types] return-type], ...]

  The generated class automatically defines all of the non-private
  methods of its superclasses/interfaces. This parameter can be used
  to specify the signatures of additional methods of the generated
  class. Static methods can be specified with ^{:static true} in the
  signature's metadata. Do not repeat superclass/interface signatures
  here.

  :main boolean

  If supplied and true, a static public main function will be generated. It will
  pass each string of the String[] argument as a separate argument to
  a function called (str prefix main).

  :factory name

  If supplied, a (set of) public static factory function(s) will be
  created with the given name, and the same signature(s) as the
  constructor(s).
  
  :state name

  If supplied, a public final instance field with the given name will be
  created. You must supply an :init function in order to provide a
  value for the state. Note that, though final, the state can be a ref
  or agent, supporting the creation of Java objects with transactional
  or asynchronous mutation semantics.

  :exposes {protected-field-name {:get name :set name}, ...}

  Since the implementations of the methods of the generated class
  occur in Clojure functions, they have no access to the inherited
  protected fields of the superclass. This parameter can be used to
  generate public getter/setter methods exposing the protected field(s)
  for use in the implementation.

  :exposes-methods {super-method-name exposed-name, ...}

  It is sometimes necessary to call the superclass' implementation of an
  overridden method.  Those methods may be exposed and referred in 
  the new method implementation by a local name.

  :prefix string

  Default: "-" Methods called e.g. Foo will be looked up in vars called
  prefixFoo in the implementing ns.

  :impl-ns name

  Default: the name of the current ns. Implementations of methods will be 
  looked up in this namespace.

  :load-impl-ns boolean

  Default: true. Causes the static initializer for the generated class
  to reference the load code for the implementing namespace. Should be
  true when implementing-ns is the default, false if you intend to
  load the code via some other method.]]></desc>
</keyword>
<keyword name="eval" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="form"/>

	</params>
	<desc><![CDATA[	Evaluates the form data structure (not text!) and returns the result.]]></desc>
</keyword>
<keyword name="aclone" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="array"/>

	</params>
	<desc><![CDATA[	Returns a clone of the Java array. Works on arrays of known
  types.]]></desc>
</keyword>
<keyword name="pop" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	For a list or queue, returns a new list/queue without the first
  item, for a vector, returns a new vector without the last item. If
  the collection is empty, throws an exception.  Note - not the same
  as next/butlast.]]></desc>
</keyword>
<keyword name="atom" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Creates and returns an Atom with an initial value of x and zero or
  more options (in any order):

  :meta metadata-map

  :validator validate-fn

  If metadata-map is supplied, it will be come the metadata on the
  atom. validate-fn must be nil or a side-effect-free fn of one
  argument, which will be passed the intended new state on any state
  change. If the new state is unacceptable, the validate-fn should
  return false or throw an exception.]]></desc>
</keyword>
<keyword name="atom" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="options"/>

	</params>
	<desc><![CDATA[	Creates and returns an Atom with an initial value of x and zero or
  more options (in any order):

  :meta metadata-map

  :validator validate-fn

  If metadata-map is supplied, it will be come the metadata on the
  atom. validate-fn must be nil or a side-effect-free fn of one
  argument, which will be passed the intended new state on any state
  change. If the new state is unacceptable, the validate-fn should
  return false or throw an exception.]]></desc>
</keyword>
<keyword name="defonce" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="name"/>
	<param type="function" name="expr"/>

	</params>
	<desc><![CDATA[	defs name to have the root value of the expr iff the named var has no root value,
  else expr is unevaluated]]></desc>
</keyword>
<keyword name="bit-shift-right" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="n"/>

	</params>
	<desc><![CDATA[	Bitwise shift right]]></desc>
</keyword>
<keyword name="delay?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	returns true if x is a Delay created with delay]]></desc>
</keyword>
<keyword name="num" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Coerce to Number]]></desc>
</keyword>
<keyword name="realized?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns true if a value has been produced for a promise, delay, future or lazy sequence.]]></desc>
</keyword>
<keyword name="disj" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="set"/>

	</params>
	<desc><![CDATA[	disj[oin]. Returns a new set of the same (hashed/sorted) type, that
  does not contain key(s).]]></desc>
</keyword>
<keyword name="disj" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="set"/>
	<param type="function" name="key"/>

	</params>
	<desc><![CDATA[	disj[oin]. Returns a new set of the same (hashed/sorted) type, that
  does not contain key(s).]]></desc>
</keyword>
<keyword name="disj" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="set"/>
	<param type="function" name="key"/>
	<param type="function" name="ks"/>

	</params>
	<desc><![CDATA[	disj[oin]. Returns a new set of the same (hashed/sorted) type, that
  does not contain key(s).]]></desc>
</keyword>
<keyword name="io!" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="body"/>

	</params>
	<desc><![CDATA[	If an io! block occurs in a transaction, throws an
  IllegalStateException, else runs body in an implicit do. If the
  first expression in body is a literal string, will use that as the
  exception message.]]></desc>
</keyword>
<keyword name="rational?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="n"/>

	</params>
	<desc><![CDATA[	Returns true if n is a rational number]]></desc>
</keyword>
<keyword name="merge-with" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="maps"/>

	</params>
	<desc><![CDATA[	Returns a map that consists of the rest of the maps conj-ed onto
  the first.  If a key occurs in more than one map, the mapping(s)
  from the latter (left-to-right) will be combined with the mapping in
  the result by calling (f val-in-result val-in-latter).]]></desc>
</keyword>
<keyword name="take-nth" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="n"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a lazy seq of every nth item in coll.]]></desc>
</keyword>
<keyword name="double" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Coerce to double]]></desc>
</keyword>
<keyword name="lazy-seq" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="body"/>

	</params>
	<desc><![CDATA[	Takes a body of expressions that returns an ISeq or nil, and yields
  a Seqable object that will invoke the body only the first time seq
  is called, and will cache the result and return it on all subsequent
  seq calls. See also - realized?]]></desc>
</keyword>
<keyword name="take-last" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="n"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a seq of the last n items in coll.  Depending on the type
  of coll may be no better than linear time.  For vectors, see also subvec.]]></desc>
</keyword>
<keyword name="line-seq" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="rdr"/>

	</params>
	<desc><![CDATA[	Returns the lines of text from rdr as a lazy sequence of strings.
  rdr must implement java.io.BufferedReader.]]></desc>
</keyword>
<keyword name="take" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="n"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a lazy sequence of the first n items in coll, or all items if
  there are fewer than n.]]></desc>
</keyword>
<keyword name="unchecked-byte" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Coerce to byte. Subject to rounding or truncation.]]></desc>
</keyword>
<keyword name="when" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="test"/>
	<param type="function" name="body"/>

	</params>
	<desc><![CDATA[	Evaluates test. If logical true, evaluates body in an implicit do.]]></desc>
</keyword>
<keyword name="areduce" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="a"/>
	<param type="function" name="idx"/>
	<param type="function" name="ret"/>
	<param type="function" name="init"/>
	<param type="function" name="expr"/>

	</params>
	<desc><![CDATA[	Reduces an expression across an array a, using an index named idx,
  and return value named ret, initialized to init, setting ret to the 
  evaluation of expr at each step, returning ret.]]></desc>
</keyword>
<keyword name="set?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns true if x implements IPersistentSet]]></desc>
</keyword>
<keyword name="make-array" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="type"/>
	<param type="function" name="len"/>

	</params>
	<desc><![CDATA[	Creates and returns an array of instances of the specified class of
  the specified dimension(s).  Note that a class object is required.
  Class objects can be obtained by using their imported or
  fully-qualified name.  Class objects for the primitive types can be
  obtained using, e.g., Integer/TYPE.]]></desc>
</keyword>
<keyword name="make-array" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="type"/>
	<param type="function" name="dim"/>
	<param type="function" name="more-dims"/>

	</params>
	<desc><![CDATA[	Creates and returns an array of instances of the specified class of
  the specified dimension(s).  Note that a class object is required.
  Class objects can be obtained by using their imported or
  fully-qualified name.  Class objects for the primitive types can be
  obtained using, e.g., Integer/TYPE.]]></desc>
</keyword>
<keyword name="rand-nth" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Return a random element of the (sequential) collection. Will have
  the same performance characteristics as nth for the given
  collection.]]></desc>
</keyword>
<keyword name="alias" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="alias"/>
	<param type="function" name="namespace-sym"/>

	</params>
	<desc><![CDATA[	Add an alias in the current namespace to another
  namespace. Arguments are two symbols: the alias to be used, and
  the symbolic name of the target namespace. Use :as in the ns macro in preference
  to calling this directly.]]></desc>
</keyword>
<keyword name="use" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="args"/>

	</params>
	<desc><![CDATA[	Like 'require, but also refers to each lib's namespace using
  clojure.core/refer. Use :use in the ns macro in preference to calling
  this directly.

  'use accepts additional options in libspecs: :exclude, :only, :rename.
  The arguments and semantics for :exclude, :only, and :rename are the same
  as those documented for clojure.core/refer.]]></desc>
</keyword>
<keyword name="juxt" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>

	</params>
	<desc><![CDATA[	Takes a set of functions and returns a fn that is the juxtaposition
  of those fns.  The returned fn takes a variable number of args, and
  returns a vector containing the result of applying each fn to the
  args (left-to-right).
  ((juxt a b c) x) => [(a x) (b x) (c x)]]]></desc>
</keyword>
<keyword name="juxt" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="g"/>

	</params>
	<desc><![CDATA[	Takes a set of functions and returns a fn that is the juxtaposition
  of those fns.  The returned fn takes a variable number of args, and
  returns a vector containing the result of applying each fn to the
  args (left-to-right).
  ((juxt a b c) x) => [(a x) (b x) (c x)]]]></desc>
</keyword>
<keyword name="juxt" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="g"/>
	<param type="function" name="h"/>

	</params>
	<desc><![CDATA[	Takes a set of functions and returns a fn that is the juxtaposition
  of those fns.  The returned fn takes a variable number of args, and
  returns a vector containing the result of applying each fn to the
  args (left-to-right).
  ((juxt a b c) x) => [(a x) (b x) (c x)]]]></desc>
</keyword>
<keyword name="juxt" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="g"/>
	<param type="function" name="h"/>
	<param type="function" name="fs"/>

	</params>
	<desc><![CDATA[	Takes a set of functions and returns a fn that is the juxtaposition
  of those fns.  The returned fn takes a variable number of args, and
  returns a vector containing the result of applying each fn to the
  args (left-to-right).
  ((juxt a b c) x) => [(a x) (b x) (c x)]]]></desc>
</keyword>
<keyword name="alength" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="array"/>

	</params>
	<desc><![CDATA[	Returns the length of the Java array. Works on arrays of all
  types.]]></desc>
</keyword>
<keyword name="chunk-first" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="s"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="defprotocol" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="name"/>
	<param type="function" name="opts+sigs"/>

	</params>
	<desc><![CDATA[	A protocol is a named set of named methods and their signatures:
  (defprotocol AProtocolName

    ;optional doc string
    "A doc string for AProtocol abstraction"

  ;method signatures
    (bar [this a b] "bar docs")
    (baz [this a] [this a b] [this a b c] "baz docs"))

  No implementations are provided. Docs can be specified for the
  protocol overall and for each method. The above yields a set of
  polymorphic functions and a protocol object. All are
  namespace-qualified by the ns enclosing the definition The resulting
  functions dispatch on the type of their first argument, which is
  required and corresponds to the implicit target object ('this' in 
  Java parlance). defprotocol is dynamic, has no special compile-time 
  effect, and defines no new types or classes. Implementations of 
  the protocol methods can be provided using extend.

  defprotocol will automatically generate a corresponding interface,
  with the same name as the protocol, i.e. given a protocol:
  my.ns/Protocol, an interface: my.ns.Protocol. The interface will
  have methods corresponding to the protocol functions, and the
  protocol will automatically work with instances of the interface.

  Note that you should not use this interface with deftype or
  reify, as they support the protocol directly:

  (defprotocol P 
    (foo [this]) 
    (bar-me [this] [this y]))

  (deftype Foo [a b c] 
   P
    (foo [this] a)
    (bar-me [this] b)
    (bar-me [this y] (+ c y)))
  
  (bar-me (Foo. 1 2 3) 42)
  => 45

  (foo 
    (let [x 42]
      (reify P 
        (foo [this] 17)
        (bar-me [this] x)
        (bar-me [this y] x))))
  => 17]]></desc>
</keyword>
<keyword name="to-array" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns an array of Objects containing the contents of coll, which
  can be any Collection.  Maps to java.util.Collection.toArray().]]></desc>
</keyword>
<keyword name="hash-map" type="function" returnType=" " definedIn="clojure.core">
	<params>

	</params>
	<desc><![CDATA[	keyval => key val
  Returns a new hash map with supplied mappings.]]></desc>
</keyword>
<keyword name="hash-map" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="keyvals"/>

	</params>
	<desc><![CDATA[	keyval => key val
  Returns a new hash map with supplied mappings.]]></desc>
</keyword>
<keyword name="bit-and-not" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	Bitwise and with complement]]></desc>
</keyword>
<keyword name="bit-and-not" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>
	<param type="function" name="more"/>

	</params>
	<desc><![CDATA[	Bitwise and with complement]]></desc>
</keyword>
<keyword name="compare-and-set!" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="atom"/>
	<param type="function" name="oldval"/>
	<param type="function" name="newval"/>

	</params>
	<desc><![CDATA[	Atomically sets the value of atom to newval if and only if the
  current value of the atom is identical to oldval. Returns true if
  set happened, else false]]></desc>
</keyword>
<keyword name="type" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns the :type metadata of x, or its Class if none]]></desc>
</keyword>
<keyword name="repeatedly" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>

	</params>
	<desc><![CDATA[	Takes a function of no args, presumably with side effects, and
  returns an infinite (or length n if supplied) lazy sequence of calls
  to it]]></desc>
</keyword>
<keyword name="repeatedly" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="n"/>
	<param type="function" name="f"/>

	</params>
	<desc><![CDATA[	Takes a function of no args, presumably with side effects, and
  returns an infinite (or length n if supplied) lazy sequence of calls
  to it]]></desc>
</keyword>
<keyword name="trampoline" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>

	</params>
	<desc><![CDATA[	trampoline can be used to convert algorithms requiring mutual
  recursion without stack consumption. Calls f with supplied args, if
  any. If f returns a fn, calls that fn with no arguments, and
  continues to repeat, until the return value is not a fn, then
  returns that non-fn value. Note that if you want to return a fn as a
  final value, you must wrap it in some data structure and unpack it
  after trampoline returns.]]></desc>
</keyword>
<keyword name="trampoline" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="args"/>

	</params>
	<desc><![CDATA[	trampoline can be used to convert algorithms requiring mutual
  recursion without stack consumption. Calls f with supplied args, if
  any. If f returns a fn, calls that fn with no arguments, and
  continues to repeat, until the return value is not a fn, then
  returns that non-fn value. Note that if you want to return a fn as a
  final value, you must wrap it in some data structure and unpack it
  after trampoline returns.]]></desc>
</keyword>
<keyword name="set-error-handler!" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="a"/>
	<param type="function" name="handler-fn"/>

	</params>
	<desc><![CDATA[	Sets the error-handler of agent a to handler-fn.  If an action
  being run by the agent throws an exception or doesn't pass the
  validator fn, handler-fn will be called with two arguments: the
  agent and the exception.]]></desc>
</keyword>
<keyword name="remove" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="pred"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a lazy sequence of the items in coll for which
  (pred item) returns false. pred must be free of side-effects.]]></desc>
</keyword>
<keyword name="find" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="map"/>
	<param type="function" name="key"/>

	</params>
	<desc><![CDATA[	Returns the map entry for key, or nil if key not present.]]></desc>
</keyword>
<keyword name="coll?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns true if x implements IPersistentCollection]]></desc>
</keyword>
<keyword name="drop-while" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="pred"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a lazy sequence of the items in coll starting from the first
  item for which (pred item) returns nil.]]></desc>
</keyword>
<keyword name="not-empty" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	If coll is empty, returns nil, else coll]]></desc>
</keyword>
<keyword name="flatten" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Takes any nested combination of sequential things (lists, vectors,
  etc.) and returns their contents as a single, flat sequence.
  (flatten nil) returns nil.]]></desc>
</keyword>
<keyword name="println-str" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="xs"/>

	</params>
	<desc><![CDATA[	println to a string, returning it]]></desc>
</keyword>
<keyword name="list" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="items"/>

	</params>
	<desc><![CDATA[	Creates a new list containing the items.]]></desc>
</keyword>
<keyword name="chunk-next" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="s"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="every?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="pred"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns true if (pred x) is logical true for every x in coll, else
  false.]]></desc>
</keyword>
<keyword name="satisfies?" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="protocol"/>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns true if x satisfies the protocol]]></desc>
</keyword>
<keyword name="flush" type="function" returnType=" " definedIn="clojure.core">
	<params>

	</params>
	<desc><![CDATA[	Flushes the output stream that is the current value of
  *out*]]></desc>
</keyword>
<keyword name="sort" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a sorted sequence of the items in coll. If no comparator is
  supplied, uses compare. comparator must
  implement java.util.Comparator.]]></desc>
</keyword>
<keyword name="sort" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="comp"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a sorted sequence of the items in coll. If no comparator is
  supplied, uses compare. comparator must
  implement java.util.Comparator.]]></desc>
</keyword>
<keyword name="dissoc" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="map"/>

	</params>
	<desc><![CDATA[	dissoc[iate]. Returns a new map of the same (hashed/sorted) type,
  that does not contain a mapping for key(s).]]></desc>
</keyword>
<keyword name="dissoc" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="map"/>
	<param type="function" name="key"/>

	</params>
	<desc><![CDATA[	dissoc[iate]. Returns a new map of the same (hashed/sorted) type,
  that does not contain a mapping for key(s).]]></desc>
</keyword>
<keyword name="dissoc" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="map"/>
	<param type="function" name="key"/>
	<param type="function" name="ks"/>

	</params>
	<desc><![CDATA[	dissoc[iate]. Returns a new map of the same (hashed/sorted) type,
  that does not contain a mapping for key(s).]]></desc>
</keyword>
<keyword name="not" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns true if x is logical false, false otherwise.]]></desc>
</keyword>
<keyword name="binding" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="bindings"/>
	<param type="function" name="body"/>

	</params>
	<desc><![CDATA[	binding => var-symbol init-expr

  Creates new bindings for the (already-existing) vars, with the
  supplied initial values, executes the exprs in an implicit do, then
  re-establishes the bindings that existed before.  The new bindings
  are made in parallel (unlike let); all init-exprs are evaluated
  before the vars are bound to their new values.]]></desc>
</keyword>
<keyword name="error-handler" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="a"/>

	</params>
	<desc><![CDATA[	Returns the error-handler of agent a, or nil if there is none.
  See set-error-handler!]]></desc>
</keyword>
<keyword name="get-method" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="multifn"/>
	<param type="function" name="dispatch-val"/>

	</params>
	<desc><![CDATA[	Given a multimethod and a dispatch value, returns the dispatch fn
  that would apply to that value, or nil if none apply and no default]]></desc>
</keyword>
<keyword name="agent" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="state"/>
	<param type="function" name="options"/>

	</params>
	<desc><![CDATA[	Creates and returns an agent with an initial value of state and
  zero or more options (in any order):

  :meta metadata-map

  :validator validate-fn

  :error-handler handler-fn

  :error-mode mode-keyword

  If metadata-map is supplied, it will be come the metadata on the
  agent. validate-fn must be nil or a side-effect-free fn of one
  argument, which will be passed the intended new state on any state
  change. If the new state is unacceptable, the validate-fn should
  return false or throw an exception.  handler-fn is called if an
  action throws an exception or if validate-fn rejects a new state --
  see set-error-handler! for details.  The mode-keyword may be either
  :continue (the default if an error-handler is given) or :fail (the
  default if no error-handler is given) -- see set-error-mode! for
  details.]]></desc>
</keyword>
<keyword name="sorted-set" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="keys"/>

	</params>
	<desc><![CDATA[	Returns a new sorted set with supplied keys.]]></desc>
</keyword>
<keyword name="alter-var-root" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="v"/>
	<param type="function" name="f"/>
	<param type="function" name="args"/>

	</params>
	<desc><![CDATA[	Atomically alters the root binding of var v by applying f to its
  current value plus any args]]></desc>
</keyword>
<keyword name="merge" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="maps"/>

	</params>
	<desc><![CDATA[	Returns a map that consists of the rest of the maps conj-ed onto
  the first.  If a key occurs in more than one map, the mapping from
  the latter (left-to-right) will be the mapping in the result.]]></desc>
</keyword>
<keyword name="subseq" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="sc"/>
	<param type="function" name="test"/>
	<param type="function" name="key"/>

	</params>
	<desc><![CDATA[	sc must be a sorted collection, test(s) one of <, <=, > or
  >=. Returns a seq of those entries with keys ek for
  which (test (.. sc comparator (compare ek key)) 0) is true]]></desc>
</keyword>
<keyword name="subseq" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="sc"/>
	<param type="function" name="start-test"/>
	<param type="function" name="start-key"/>
	<param type="function" name="end-test"/>
	<param type="function" name="end-key"/>

	</params>
	<desc><![CDATA[	sc must be a sorted collection, test(s) one of <, <=, > or
  >=. Returns a seq of those entries with keys ek for
  which (test (.. sc comparator (compare ek key)) 0) is true]]></desc>
</keyword>
<keyword name="min" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns the least of the nums.]]></desc>
</keyword>
<keyword name="min" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>

	</params>
	<desc><![CDATA[	Returns the least of the nums.]]></desc>
</keyword>
<keyword name="min" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="y"/>
	<param type="function" name="more"/>

	</params>
	<desc><![CDATA[	Returns the least of the nums.]]></desc>
</keyword>
<keyword name="print-simple" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="o"/>
	<param type="function" name="w"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="bit-test" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="n"/>

	</params>
	<desc><![CDATA[	Test bit at index n]]></desc>
</keyword>
<keyword name="await-for" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="timeout-ms"/>
	<param type="function" name="agents"/>

	</params>
	<desc><![CDATA[	Blocks the current thread until all actions dispatched thus
  far (from this thread or agent) to the agents have occurred, or the
  timeout (in milliseconds) has elapsed. Returns nil if returning due
  to timeout, non-nil otherwise.]]></desc>
</keyword>
<keyword name="keep" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a lazy sequence of the non-nil results of (f item). Note,
  this means false return values will be included.  f must be free of
  side-effects.]]></desc>
</keyword>
<keyword name="disj!" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="set"/>

	</params>
	<desc><![CDATA[	Alpha - subject to change.
  disj[oin]. Returns a transient set of the same (hashed/sorted) type, that
  does not contain key(s).]]></desc>
</keyword>
<keyword name="disj!" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="set"/>
	<param type="function" name="key"/>

	</params>
	<desc><![CDATA[	Alpha - subject to change.
  disj[oin]. Returns a transient set of the same (hashed/sorted) type, that
  does not contain key(s).]]></desc>
</keyword>
<keyword name="disj!" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="set"/>
	<param type="function" name="key"/>
	<param type="function" name="ks"/>

	</params>
	<desc><![CDATA[	Alpha - subject to change.
  disj[oin]. Returns a transient set of the same (hashed/sorted) type, that
  does not contain key(s).]]></desc>
</keyword>
<keyword name="meta" type="function" returnType=" " definedIn="clojure.core">
	<params>
	<param type="function" name="obj"/>

	</params>
	<desc><![CDATA[	Returns the metadata of obj, returns nil if there is no metadata.]]></desc>
</keyword>
<keyword name="sh" type="function" returnType=" " definedIn="clojure.java.shell">
	<params>
	<param type="function" name="args"/>

	</params>
	<desc><![CDATA[	Passes the given strings to Runtime.exec() to launch a sub-process.

  Options are

  :in      may be given followed by any legal input source for
           clojure.java.io/copy, e.g. InputStream, Reader, File, byte[],
           or String, to be fed to the sub-process's stdin.
  :in-enc  option may be given followed by a String, used as a character
           encoding name (for example "UTF-8" or "ISO-8859-1") to
           convert the input string specified by the :in option to the
           sub-process's stdin.  Defaults to UTF-8.
           If the :in option provides a byte array, then the bytes are passed
           unencoded, and this option is ignored.
  :out-enc option may be given followed by :bytes or a String. If a
           String is given, it will be used as a character encoding
           name (for example "UTF-8" or "ISO-8859-1") to convert
           the sub-process's stdout to a String which is returned.
           If :bytes is given, the sub-process's stdout will be stored
           in a byte array and returned.  Defaults to UTF-8.
  :env     override the process env with a map (or the underlying Java
           String[] if you are a masochist).
  :dir     override the process dir with a String or java.io.File.

  You can bind :env or :dir for multiple operations using with-sh-env
  and with-sh-dir.

  sh returns a map of
    :exit => sub-process's exit code
    :out  => sub-process's stdout (as byte[] or String)
    :err  => sub-process's stderr (String via platform default encoding)]]></desc>
</keyword>
<keyword name="with-sh-env" type="function" returnType=" " definedIn="clojure.java.shell">
	<params>
	<param type="function" name="env"/>
	<param type="function" name="forms"/>

	</params>
	<desc><![CDATA[	Sets the environment for use with sh, see sh for details.]]></desc>
</keyword>
<keyword name="with-sh-dir" type="function" returnType=" " definedIn="clojure.java.shell">
	<params>
	<param type="function" name="dir"/>
	<param type="function" name="forms"/>

	</params>
	<desc><![CDATA[	Sets the directory for use with sh, see sh for details.]]></desc>
</keyword>
<keyword name="browse-url" type="function" returnType=" " definedIn="clojure.java.browse">
	<params>
	<param type="function" name="url"/>

	</params>
	<desc><![CDATA[	Open url in a browser]]></desc>
</keyword>
<keyword name="source" type="function" returnType=" " definedIn="clojure.repl">
	<params>
	<param type="function" name="n"/>

	</params>
	<desc><![CDATA[	Prints the source code for the given symbol, if it can find it.
  This requires that the symbol resolve to a Var defined in a
  namespace for which the .clj is in the classpath.

  Example: (source filter)]]></desc>
</keyword>
<keyword name="stack-element-str" type="function" returnType=" " definedIn="clojure.repl">
	<params>
	<param type="function" name="el"/>

	</params>
	<desc><![CDATA[	Returns a (possibly unmunged) string representation of a StackTraceElement]]></desc>
</keyword>
<keyword name="set-break-handler!" type="function" returnType=" " definedIn="clojure.repl">
	<params>

	</params>
	<desc><![CDATA[	Register INT signal handler.  After calling this, Ctrl-C will cause
  the given function f to be called with a single argument, the signal.
  Uses thread-stopper if no function given.]]></desc>
</keyword>
<keyword name="set-break-handler!" type="function" returnType=" " definedIn="clojure.repl">
	<params>
	<param type="function" name="f"/>

	</params>
	<desc><![CDATA[	Register INT signal handler.  After calling this, Ctrl-C will cause
  the given function f to be called with a single argument, the signal.
  Uses thread-stopper if no function given.]]></desc>
</keyword>
<keyword name="find-doc" type="function" returnType=" " definedIn="clojure.repl">
	<params>
	<param type="function" name="re-string-or-pattern"/>

	</params>
	<desc><![CDATA[	Prints documentation for any var whose documentation or name
 contains a match for re-string-or-pattern]]></desc>
</keyword>
<keyword name="thread-stopper" type="function" returnType=" " definedIn="clojure.repl">
	<params>

	</params>
	<desc><![CDATA[	Returns a function that takes one arg and uses that as an exception message
  to stop the given thread.  Defaults to the current thread]]></desc>
</keyword>
<keyword name="thread-stopper" type="function" returnType=" " definedIn="clojure.repl">
	<params>
	<param type="function" name="thread"/>

	</params>
	<desc><![CDATA[	Returns a function that takes one arg and uses that as an exception message
  to stop the given thread.  Defaults to the current thread]]></desc>
</keyword>
<keyword name="demunge" type="function" returnType=" " definedIn="clojure.repl">
	<params>
	<param type="function" name="fn-name"/>

	</params>
	<desc><![CDATA[	Given a string representation of a fn class,
  as in a stack trace element, returns a readable version.]]></desc>
</keyword>
<keyword name="apropos" type="function" returnType=" " definedIn="clojure.repl">
	<params>
	<param type="function" name="str-or-pattern"/>

	</params>
	<desc><![CDATA[	Given a regular expression or stringable thing, return a seq of
all definitions in all currently-loaded namespaces that match the
str-or-pattern.]]></desc>
</keyword>
<keyword name="dir" type="function" returnType=" " definedIn="clojure.repl">
	<params>
	<param type="function" name="nsname"/>

	</params>
	<desc><![CDATA[	Prints a sorted directory of public vars in a namespace]]></desc>
</keyword>
<keyword name="dir-fn" type="function" returnType=" " definedIn="clojure.repl">
	<params>
	<param type="function" name="ns"/>

	</params>
	<desc><![CDATA[	Returns a sorted seq of symbols naming public vars in
  a namespace]]></desc>
</keyword>
<keyword name="root-cause" type="function" returnType=" " definedIn="clojure.repl">
	<params>
	<param type="function" name="t"/>

	</params>
	<desc><![CDATA[	Returns the initial cause of an exception or error by peeling off all of
  its wrappers]]></desc>
</keyword>
<keyword name="pst" type="function" returnType=" " definedIn="clojure.repl">
	<params>

	</params>
	<desc><![CDATA[	Prints a stack trace of the exception, to the depth requested. If none supplied, uses the root cause of the
  most recent repl exception (*e), and a depth of 12.]]></desc>
</keyword>
<keyword name="pst" type="function" returnType=" " definedIn="clojure.repl">
	<params>
	<param type="function" name="e-or-depth"/>

	</params>
	<desc><![CDATA[	Prints a stack trace of the exception, to the depth requested. If none supplied, uses the root cause of the
  most recent repl exception (*e), and a depth of 12.]]></desc>
</keyword>
<keyword name="pst" type="function" returnType=" " definedIn="clojure.repl">
	<params>
	<param type="function" name="e"/>
	<param type="function" name="depth"/>

	</params>
	<desc><![CDATA[	Prints a stack trace of the exception, to the depth requested. If none supplied, uses the root cause of the
  most recent repl exception (*e), and a depth of 12.]]></desc>
</keyword>
<keyword name="source-fn" type="function" returnType=" " definedIn="clojure.repl">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Returns a string of the source code for the given symbol, if it can
  find it.  This requires that the symbol resolve to a Var defined in
  a namespace for which the .clj is in the classpath.  Returns nil if
  it can't find the source.  For most REPL usage, 'source' is more
  convenient.

  Example: (source-fn 'filter)]]></desc>
</keyword>
<keyword name="doc" type="function" returnType=" " definedIn="clojure.repl">
	<params>
	<param type="function" name="name"/>

	</params>
	<desc><![CDATA[	Prints documentation for a var or special form given its name]]></desc>
</keyword>
<keyword name="output-stream" type="function" returnType=" " definedIn="clojure.java.io">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="opts"/>

	</params>
	<desc><![CDATA[	Attempts to coerce its argument into an open java.io.OutputStream.
   Default implementations always return a java.io.BufferedOutputStream.

   Default implementations are defined for OutputStream, File, URI, URL,
   Socket, and String arguments.

   If the argument is a String, it tries to resolve it first as a URI, then
   as a local file name.  URIs with a 'file' protocol are converted to
   local file names.

   Should be used inside with-open to ensure the OutputStream is
   properly closed.]]></desc>
</keyword>
<keyword name="copy" type="function" returnType=" " definedIn="clojure.java.io">
	<params>
	<param type="function" name="input"/>
	<param type="function" name="output"/>
	<param type="function" name="opts"/>

	</params>
	<desc><![CDATA[	Copies input to output.  Returns nil or throws IOException.
  Input may be an InputStream, Reader, File, byte[], or String.
  Output may be an OutputStream, Writer, or File.

  Options are key/value pairs and may be one of

    :buffer-size  buffer size to use, default is 1024.
    :encoding     encoding to use if converting between
                  byte and char streams.   

  Does not close any streams except those it opens itself 
  (on a File).]]></desc>
</keyword>
<keyword name="file" type="function" returnType=" " definedIn="clojure.java.io">
	<params>
	<param type="function" name="arg"/>

	</params>
	<desc><![CDATA[	Returns a java.io.File, passing each arg to as-file.  Multiple-arg
   versions treat the first argument as parent and subsequent args as
   children relative to the parent.]]></desc>
</keyword>
<keyword name="file" type="function" returnType=" " definedIn="clojure.java.io">
	<params>
	<param type="function" name="parent"/>
	<param type="function" name="child"/>

	</params>
	<desc><![CDATA[	Returns a java.io.File, passing each arg to as-file.  Multiple-arg
   versions treat the first argument as parent and subsequent args as
   children relative to the parent.]]></desc>
</keyword>
<keyword name="file" type="function" returnType=" " definedIn="clojure.java.io">
	<params>
	<param type="function" name="parent"/>
	<param type="function" name="child"/>
	<param type="function" name="more"/>

	</params>
	<desc><![CDATA[	Returns a java.io.File, passing each arg to as-file.  Multiple-arg
   versions treat the first argument as parent and subsequent args as
   children relative to the parent.]]></desc>
</keyword>
<keyword name="writer" type="function" returnType=" " definedIn="clojure.java.io">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="opts"/>

	</params>
	<desc><![CDATA[	Attempts to coerce its argument into an open java.io.Writer.
   Default implementations always return a java.io.BufferedWriter.

   Default implementations are provided for Writer, BufferedWriter,
   OutputStream, File, URI, URL, Socket, and String.

   If the argument is a String, it tries to resolve it first as a URI, then
   as a local file name.  URIs with a 'file' protocol are converted to
   local file names.

   Should be used inside with-open to ensure the Writer is properly
   closed.]]></desc>
</keyword>
<keyword name="as-relative-path" type="function" returnType=" " definedIn="clojure.java.io">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Take an as-file-able thing and return a string if it is
   a relative path, else IllegalArgumentException.]]></desc>
</keyword>
<keyword name="make-output-stream" type="function" returnType=" " definedIn="clojure.java.io">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="opts"/>

	</params>
	<desc><![CDATA[	Creates a BufferedOutputStream. See also IOFactory docs.]]></desc>
</keyword>
<keyword name="make-parents" type="function" returnType=" " definedIn="clojure.java.io">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="more"/>

	</params>
	<desc><![CDATA[	Given the same arg(s) as for file, creates all parent directories of
   the file they represent.]]></desc>
</keyword>
<keyword name="reader" type="function" returnType=" " definedIn="clojure.java.io">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="opts"/>

	</params>
	<desc><![CDATA[	Attempts to coerce its argument into an open java.io.Reader.
   Default implementations always return a java.io.BufferedReader.

   Default implementations are provided for Reader, BufferedReader,
   InputStream, File, URI, URL, Socket, byte arrays, character arrays,
   and String.

   If argument is a String, it tries to resolve it first as a URI, then
   as a local file name.  URIs with a 'file' protocol are converted to
   local file names.

   Should be used inside with-open to ensure the Reader is properly
   closed.]]></desc>
</keyword>
<keyword name="delete-file" type="function" returnType=" " definedIn="clojure.java.io">
	<params>
	<param type="function" name="f"/>
	<param type="function" name="[silently]"/>

	</params>
	<desc><![CDATA[	Delete file f. Raise an exception if it fails unless silently is true.]]></desc>
</keyword>
<keyword name="as-file" type="function" returnType=" " definedIn="clojure.java.io">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Coerce argument to a file.]]></desc>
</keyword>
<keyword name="resource" type="function" returnType=" " definedIn="clojure.java.io">
	<params>
	<param type="function" name="n"/>

	</params>
	<desc><![CDATA[	Returns the URL for a named resource. Use the context class loader
   if no loader is specified.]]></desc>
</keyword>
<keyword name="resource" type="function" returnType=" " definedIn="clojure.java.io">
	<params>
	<param type="function" name="n"/>
	<param type="function" name="loader"/>

	</params>
	<desc><![CDATA[	Returns the URL for a named resource. Use the context class loader
   if no loader is specified.]]></desc>
</keyword>
<keyword name="input-stream" type="function" returnType=" " definedIn="clojure.java.io">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="opts"/>

	</params>
	<desc><![CDATA[	Attempts to coerce its argument into an open java.io.InputStream.
   Default implementations always return a java.io.BufferedInputStream.

   Default implementations are defined for OutputStream, File, URI, URL,
   Socket, byte array, and String arguments.

   If the argument is a String, it tries to resolve it first as a URI, then
   as a local file name.  URIs with a 'file' protocol are converted to
   local file names.

   Should be used inside with-open to ensure the InputStream is properly
   closed.]]></desc>
</keyword>
<keyword name="make-input-stream" type="function" returnType=" " definedIn="clojure.java.io">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="opts"/>

	</params>
	<desc><![CDATA[	Creates a BufferedInputStream. See also IOFactory docs.]]></desc>
</keyword>
<keyword name="make-writer" type="function" returnType=" " definedIn="clojure.java.io">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="opts"/>

	</params>
	<desc><![CDATA[	Creates a BufferedWriter. See also IOFactory docs.]]></desc>
</keyword>
<keyword name="as-url" type="function" returnType=" " definedIn="clojure.java.io">
	<params>
	<param type="function" name="x"/>

	</params>
	<desc><![CDATA[	Coerce argument to a URL.]]></desc>
</keyword>
<keyword name="make-reader" type="function" returnType=" " definedIn="clojure.java.io">
	<params>
	<param type="function" name="x"/>
	<param type="function" name="opts"/>

	</params>
	<desc><![CDATA[	Creates a BufferedReader. See also IOFactory docs.]]></desc>
</keyword>
<keyword name="trim" type="function" returnType=" " definedIn="clojure.string">
	<params>
	<param type="function" name="s"/>

	</params>
	<desc><![CDATA[	Removes whitespace from both ends of string.]]></desc>
</keyword>
<keyword name="lower-case" type="function" returnType=" " definedIn="clojure.string">
	<params>
	<param type="function" name="s"/>

	</params>
	<desc><![CDATA[	Converts string to all lower-case.]]></desc>
</keyword>
<keyword name="split" type="function" returnType=" " definedIn="clojure.string">
	<params>
	<param type="function" name="s"/>
	<param type="function" name="re"/>

	</params>
	<desc><![CDATA[	Splits string on a regular expression.  Optional argument limit is
  the maximum number of splits. Not lazy. Returns vector of the splits.]]></desc>
</keyword>
<keyword name="split" type="function" returnType=" " definedIn="clojure.string">
	<params>
	<param type="function" name="s"/>
	<param type="function" name="re"/>
	<param type="function" name="limit"/>

	</params>
	<desc><![CDATA[	Splits string on a regular expression.  Optional argument limit is
  the maximum number of splits. Not lazy. Returns vector of the splits.]]></desc>
</keyword>
<keyword name="join" type="function" returnType=" " definedIn="clojure.string">
	<params>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a string of all elements in coll, as returned by (seq coll),
   separated by an optional separator.]]></desc>
</keyword>
<keyword name="join" type="function" returnType=" " definedIn="clojure.string">
	<params>
	<param type="function" name="separator"/>
	<param type="function" name="coll"/>

	</params>
	<desc><![CDATA[	Returns a string of all elements in coll, as returned by (seq coll),
   separated by an optional separator.]]></desc>
</keyword>
<keyword name="upper-case" type="function" returnType=" " definedIn="clojure.string">
	<params>
	<param type="function" name="s"/>

	</params>
	<desc><![CDATA[	Converts string to all upper-case.]]></desc>
</keyword>
<keyword name="trimr" type="function" returnType=" " definedIn="clojure.string">
	<params>
	<param type="function" name="s"/>

	</params>
	<desc><![CDATA[	Removes whitespace from the right side of string.]]></desc>
</keyword>
<keyword name="split-lines" type="function" returnType=" " definedIn="clojure.string">
	<params>
	<param type="function" name="s"/>

	</params>
	<desc><![CDATA[	Splits s on \n or \r\n.]]></desc>
</keyword>
<keyword name="triml" type="function" returnType=" " definedIn="clojure.string">
	<params>
	<param type="function" name="s"/>

	</params>
	<desc><![CDATA[	Removes whitespace from the left side of string.]]></desc>
</keyword>
<keyword name="replace" type="function" returnType=" " definedIn="clojure.string">
	<params>
	<param type="function" name="s"/>
	<param type="function" name="match"/>
	<param type="function" name="replacement"/>

	</params>
	<desc><![CDATA[	Replaces all instance of match with replacement in s.

   match/replacement can be:

   string / string
   char / char
   pattern / (string or function of match).

   See also replace-first.]]></desc>
</keyword>
<keyword name="reverse" type="function" returnType=" " definedIn="clojure.string">
	<params>
	<param type="function" name="s"/>

	</params>
	<desc><![CDATA[	Returns s with its characters reversed.]]></desc>
</keyword>
<keyword name="capitalize" type="function" returnType=" " definedIn="clojure.string">
	<params>
	<param type="function" name="s"/>

	</params>
	<desc><![CDATA[	Converts first character of the string to upper-case, all other
  characters to lower-case.]]></desc>
</keyword>
<keyword name="escape" type="function" returnType=" " definedIn="clojure.string">
	<params>
	<param type="function" name="s"/>
	<param type="function" name="cmap"/>

	</params>
	<desc><![CDATA[	Return a new string, using cmap to escape each character ch
   from s as follows:
   
   If (cmap ch) is nil, append ch to the new string.
   If (cmap ch) is non-nil, append (str (cmap ch)) instead.]]></desc>
</keyword>
<keyword name="blank?" type="function" returnType=" " definedIn="clojure.string">
	<params>
	<param type="function" name="s"/>

	</params>
	<desc><![CDATA[	True if s is nil, empty, or contains only whitespace.]]></desc>
</keyword>
<keyword name="replace-first" type="function" returnType=" " definedIn="clojure.string">
	<params>
	<param type="function" name="s"/>
	<param type="function" name="match"/>
	<param type="function" name="replacement"/>

	</params>
	<desc><![CDATA[	Replaces the first instance of match with replacement in s.

   match/replacement can be:

   char / char
   string / string
   pattern / (string or function of match).

   See also replace-all.]]></desc>
</keyword>
<keyword name="trim-newline" type="function" returnType=" " definedIn="clojure.string">
	<params>
	<param type="function" name="s"/>

	</params>
	<desc><![CDATA[	Removes all trailing newline \n or return \r characters from
  string.  Similar to Perl's chomp.]]></desc>
</keyword>
<keyword name="emit-array-impls" type="function" returnType=" " definedIn="clojure.core.protocols">
	<params>
	<param type="function" name="syms"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="internal-reduce" type="function" returnType=" " definedIn="clojure.core.protocols">
	<params>
	<param type="function" name="seq"/>
	<param type="function" name="f"/>
	<param type="function" name="start"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="javadoc" type="function" returnType=" " definedIn="clojure.java.javadoc">
	<params>
	<param type="function" name="class-or-object"/>

	</params>
	<desc><![CDATA[	Opens a browser window displaying the javadoc for the argument.
  Tries *local-javadocs* first, then *remote-javadocs*.]]></desc>
</keyword>
<keyword name="add-remote-javadoc" type="function" returnType=" " definedIn="clojure.java.javadoc">
	<params>
	<param type="function" name="package-prefix"/>
	<param type="function" name="url"/>

	</params>
	<desc><![CDATA[	Adds to the list of remote Javadoc URLs.  package-prefix is the
  beginning of the package name that has docs at this URL.]]></desc>
</keyword>
<keyword name="add-local-javadoc" type="function" returnType=" " definedIn="clojure.java.javadoc">
	<params>
	<param type="function" name="path"/>

	</params>
	<desc><![CDATA[	Adds to the list of local Javadoc paths.]]></desc>
</keyword>
<keyword name="create-all-ns-xml" type="function" returnType=" " definedIn="language-builder.core">
	<params>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="create-xml-from-ns" type="function" returnType=" " definedIn="language-builder.core">
	<params>
	<param type="function" name="ns"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="ns-publics-to-map" type="function" returnType=" " definedIn="language-builder.core">
	<params>
	<param type="function" name="name-space"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="dbl-q" type="function" returnType=" " definedIn="language-builder.core">
	<params>
	<param type="function" name="word"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="parse-params" type="function" returnType=" " definedIn="language-builder.core">
	<params>
	<param type="function" name="pv"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="keyword-s" type="function" returnType=" " definedIn="language-builder.core">
	<params>
	<param type="function" name="var"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="create-keyword-xml" type="function" returnType=" " definedIn="language-builder.core">
	<params>
	<param type="function" name="var"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="param-s" type="function" returnType=" " definedIn="language-builder.core">
	<params>
	<param type="function" name="p"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="take-str" type="function" returnType=" " definedIn="language-builder.core">
	<params>
	<param type="function" name="n"/>
	<param type="function" name="s"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
<keyword name="take-str" type="function" returnType=" " definedIn="language-builder.core">
	<params>
	<param type="function" name="start"/>
	<param type="function" name="end"/>
	<param type="function" name="s"/>

	</params>
	<desc><![CDATA[	]]></desc>
</keyword>
	</keywords>
</api>